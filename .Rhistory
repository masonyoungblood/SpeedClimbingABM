#run bivariate analysis with expl and laten as outcome variables, month, sex, open_retr, labyr_exit, and labyr_retr as fixed effects, and ind as random effect, with inverse gamma priors
biv_ig_prior <- list(R = list(V = diag(2), nu = 1.002),
G = list(G1 = list(V = diag(2), nu = 1.002)))
biv_for_eff <- MCMCglmm(cbind(expl, scale(log(laten))) ~ trait - 1 + trait:scale(month, scale = FALSE) + trait:scale(sex, scale = FALSE) + trait:scale(open_retr, scale = FALSE) + trait:labyr_exit + trait:labyr_retr,
random = ~ us(trait):ind,
rcov = ~ us(trait):units,
data = long_data,
family = c("gaussian", "gaussian"),
burnin = 1000, nitt = 100000, thin = 10,
prior = biv_ig_prior)
summary(biv_for_eff)
laten_rpt <- rptGaussian(log(laten) ~ (1 | ind), data = long_data, grname = "ind", nboot = 10000, npermut = 100000)
BBmisc::normalize(c(1, 2, 3, 4, 5), "range", c(-1, 1))
BBmisc::normalize(c(1, 2, 3, 4, 5), "range", c(-1, 1))
BBmisc::normalize(c(1, 2, 3, 4, 5), "range", c(-1, 1))
BBmisc::normalize(c(1, 2, 3, 4, 5), "range", c(-1, 1))
learn_x_times = 0
learn_x_pop = 0
innov_x_times = 0
innov_x_pop = 0
learn_x_pop > 0 & learn_x_pop > 0
knitr::include_graphics("https://helios-i.mashable.com/imagery/articles/03XKxYMwkNiZJGiHUu2FWnw/hero-image.fill.size_1248x702.v1628089817.png")
#bounded exponential function
bounded_exp <- function(x, rate, min){
return((1-min)*(rate/rate^x)+min)
}
# #generate values
# x <- 1:12
# rates <- truncnorm::rtruncnorm(100, a = 1, mean = 2, sd = 0.2)
# y <- sapply(1:length(rates), function(h){bounded_exp(x, rates[h], 0.4)})
#generate values
x <- 1:12
rates <- truncnorm::rtruncnorm(100, a = 1, mean = 2.5, sd = 0.3)
y <- sapply(1:length(rates), function(h){bounded_exp(x, rates[h], 0.07)})
#plot
par(mar = c(4, 4, 1, 1))
matplot(x, y, type = "l", xlab = "Timestep", ylab = "Athletic Improvement", ylim = c(0, 1), col = scales::alpha("black", 0.2), lty = 1)
knitr::include_graphics("https://www.kindpng.com/picc/m/592-5929143_speed-climbing-wall-sketch-speed-climbing-route-map.png")
#set number of holds
n_holds <- 20
#set initial mean speed
init_time <- 18
#set probability of initial beta holds at 1 (all holds on the route)
beta_true_prob <- 1
#set parameter controlling the SD of sequence ratios
sd_multiplier <- 0.5
#initialize starting beta
beta <- sample(c(TRUE, FALSE), n_holds, prob = c(beta_true_prob, 1-beta_true_prob), replace = TRUE)
#initialize sequence ratios
seq_ratios <- truncnorm::rtruncnorm(n_holds, a = 0, mean = 1, sd = sd_multiplier)
#print the beta and climbing time vectors
beta
(init_time/n_holds)*seq_ratios
#get cumulative climbing times
cum_num <- cumsum(c(0, (init_time/n_holds)*seq_ratios))
#restructure and plot
to_plot <- data.frame(x = unlist(sapply(1:(length(cum_num)-1), function(x){seq(cum_num[x], cum_num[x+1], by = 0.01)})),
y = unlist(sapply(1:(length(cum_num)-1), function(x){rep(x, length(seq(cum_num[x], cum_num[x+1], by = 0.01)))})))
par(mar = c(4, 4, 1, 1))
plot(to_plot$x, to_plot$y, type = "l", xlab = "Time (s)", ylab = "Hold #")
load("data.RData")
data.table::data.table(data)
par(mar = c(4, 4, 1, 1))
hist(as.numeric(sort(table(data$athlete), decreasing = TRUE)), main = NULL, xlab = "# of Years")
#get all unique climbers
uniq_climbers <- unique(data$athlete)
#separate continuous sequences of years
seqs <- lapply(uniq_climbers, function(x){split(data$year[which(data$athlete == x)], cumsum(seq_along(data$year[which(data$athlete == x)]) %in% (which(diff(data$year[which(data$athlete == x)]) > 1) + 1)))})
#for each unique climber, iterate through their sequences, and and extract their ID, start year, end year, and time in start year (separate row per sequence)
pop_data <- data.table::data.table(do.call(rbind, lapply(1:length(uniq_climbers), function(i){
t(sapply(1:length(seqs[[i]]), function(j){
c(uniq_climbers[i], min(unlist(seqs[[i]][j])), max(unlist(seqs[[i]][j])), data$time[which(data$athlete == uniq_climbers[i] & data$year == min(unlist(seqs[[i]][j])))])
}))
})))
colnames(pop_data) <- c("ID", "start", "end", "time")
pop_data
#remove temp objects
rm(list = c("seqs", "uniq_climbers"))
source("SpeedClimbingABM.R")
load("data.RData")
pop_data <- pop_data[which(data$gender[match(pop_data$ID, data$athlete)] == "M"), ]
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.8, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.8, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.8, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0, n_top = 20,
innov_prob = 0, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(123)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
learn_x_times = 1, innov_x_times = -1, learn_x_pop = 1, innov_x_pop = 1,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(1234)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(123)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
learn_x_times = 1, innov_x_times = -1, learn_x_pop = 1, innov_x_pop = 1,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(12345)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#set seed
set.seed(12345)
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
learn_x_times = 1, innov_x_times = -1, learn_x_pop = 1, innov_x_pop = 1,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
learn_x_times = 1, innov_x_times = -1, learn_x_pop = 1, innov_x_pop = 1,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
learn_x_times = 1, innov_x_times = -1, learn_x_pop = 1, innov_x_pop = 1,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
learn_x_times = 1, innov_x_times = -1, learn_x_pop = 1, innov_x_pop = 1,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, years = years, pop_data = pop_data,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 5,
innov_prob = 0.9, adj_poss = 2, improve_rate_m = 2, improve_rate_sd = 0.2, improve_min = 0.4,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
setwd("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
library(abc)
load("data.RData")
#get all unique climbers
uniq_climbers <- unique(data$athlete)
#separate continuous sequences of years
seqs <- lapply(uniq_climbers, function(x){split(data$year[which(data$athlete == x)], cumsum(seq_along(data$year[which(data$athlete == x)]) %in% (which(diff(data$year[which(data$athlete == x)]) > 1) + 1)))})
#for each unique climber, iterate through their sequences, and and extract their ID, start year, end year, and time in start year (separate row per sequence)
pop_data <- data.table::data.table(do.call(rbind, lapply(1:length(uniq_climbers), function(i){
t(sapply(1:length(seqs[[i]]), function(j){
c(uniq_climbers[i], min(unlist(seqs[[i]][j])), max(unlist(seqs[[i]][j])), data$time[which(data$athlete == uniq_climbers[i] & data$year == min(unlist(seqs[[i]][j])))])
}))
})))
colnames(pop_data) <- c("ID", "start", "end", "time")
pop_data
pop_data <- pop_data[which(data$gender[match(pop_data$ID, data$athlete)] == "M"), ]
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
results <- readRDS("hpcc_output/_rslurm_main/results_0.RDS")
results[[1]]
results[1:20]
unlist(results)
results <- unlist(results)
results
load("hpcc_output/_rslurm_main/params.RDS")
priors <- readRDS("hpcc_output/_rslurm_main/params.RDS")
priors <- priors[1:length(results),]
order(results)
restuls[order(results)]
results[order(results)]
results[order(results)[1:100]]
priors[order(results)[1:100], ]
priors$innov_prob[order(results)[1:100]]
hist(priors$innov_prob[order(results)[1:100]])
hist(priors$innov_prob[order(results)[1:100]], breaks = 100)
hist(priors$innov_prob[order(results)[1:10]], breaks = 100)
hist(priors$innov_prob[order(results)[1:1000]], breaks = 100)
hist(priors$learn_prob[order(results)[1:1000]], breaks = 100)
hist(priors$learn_prob[order(results)[1:100]], breaks = 100)
hist(priors$learn_prob[order(results)[1:10]], breaks = 100)
results_0 <- readRDS("hpcc_output/_rslurm_main/results_0.RDS")
results_1 <- readRDS("hpcc_output/_rslurm_main/results_1.RDS")
results_2 <- readRDS("hpcc_output/_rslurm_main/results_2.RDS")
results_3 <- readRDS("hpcc_output/_rslurm_main/results_3.RDS")
results_4 <- readRDS("hpcc_output/_rslurm_main/results_4.RDS")
results_5 <- readRDS("hpcc_output/_rslurm_main/results_5.RDS")
results <- c(unlist(results_0), unlist(results_1), unlist(results_2), unlist(results_3), unlist(results_4), unlist(results_5))
priors <- readRDS("hpcc_output/_rslurm_main/params.RDS")
hist(priors$innov_prob[order(results)[1:100], ], breaks = 100)
results
hist(priors$innov_prob[order(results)[1:100]], breaks = 100)
density(priors$innov_prob[order(results)[1:10]])
plot(density(priors$innov_prob[order(results)[1:10]]))
plot(density(priors$innov_prob[order(results)[1:100]]))
plot(density(priors$innov_prob[order(results)[1:100]]), xlim = c(0, 0.5))
plot(density(priors$innov_prob[order(results)[1:1000]]), xlim = c(0, 0.5))
plot(density(priors$learn_prob[order(results)[1:1000]]), xlim = c(0, 0.5))
plot(density(priors$learn_prob[order(results)[1:100]]), xlim = c(0, 0.5))
plot(density(priors$learn_prob[order(results)[1:10]]), xlim = c(0, 0.5))
plot(density(priors$learn_prob[order(results)[1:100]]), xlim = c(0, 0.5))
plot(density(priors$innov_prob[order(results)[1:100]]), xlim = c(0, 0.5))
plot(density(priors$innov_prob[order(results)[1:100]]), xlim = c(0, 0.5), main = NULL)
plot(density(priors$innov_prob[order(results)[1:100]]), xlim = c(0, 0.5), title = NULL)
plot(density(priors$innov_prob[order(results)[1:100]]), xlim = c(0, 0.5), main = "")
plot(density(priors$learn_prob[order(results)[1:100]]), xlim = c(0, 0.5), main = "")
plot(density(priors$n_top[order(results)[1:100]]), xlim = c(0, 0.5), main = "")
plot(density(priors$n_top[order(results)[1:100]]), xlim = c(1, 2), main = "")
plot(density(priors$n_top[order(results)[1:100]]), xlim = c(1, 80), main = "")
min(priors$n_top)
plot(density(priors$n_top[order(results)[1:100]]), xlim = c(min(priors$n_top), max(priors$n_top)), main = "")
plot(density(priors$adj_poss[order(results)[1:100]]), xlim = c(min(priors$adj_poss), max(priors$adj_poss)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:100]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:100]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:100]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
plot(density(priors$innov_prob[order(results)[1:10]]), xlim = c(0, 0.5), main = "")
plot(density(priors$learn_prob[order(results)[1:10]]), xlim = c(0, 0.5), main = "")
plot(density(priors$n_top[order(results)[1:10]]), xlim = c(min(priors$n_top), max(priors$n_top)), main = "")
plot(density(priors$adj_poss[order(results)[1:10]]), xlim = c(min(priors$adj_poss), max(priors$adj_poss)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:10]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:10]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:10]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
par(mar = c(4, 4, 1, 1))
plot(density(priors$innov_prob[order(results)[1:100]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$learn_prob[order(results)[1:100]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$n_top[order(results)[1:100]]), xlim = c(min(priors$n_top), max(priors$n_top)), main = "")
plot(density(priors$adj_poss[order(results)[1:100]]), xlim = c(min(priors$adj_poss), max(priors$adj_poss)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:100]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:100]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:100]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
plot(density(priors$innov_prob), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$innov_prob[order(results)[1:100]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:100]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_m), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:100]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:100]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
plot(density(priors$improve_min), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
plot(density(priors$learn_prob[order(results)[1:100]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$learn_prob), xlim = c(min(priors$learn_prob), max(priors$learn_prob)), main = "")
hist(results)
plot(density(results))
par(mar = c(4, 4, 1, 1))
plot(density(priors$innov_prob[order(results)[1:1000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$learn_prob[order(results)[1:1000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$n_top[order(results)[1:1000]]), xlim = c(min(priors$n_top), max(priors$n_top)), main = "")
plot(density(priors$adj_poss[order(results)[1:1000]]), xlim = c(min(priors$adj_poss), max(priors$adj_poss)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:1000]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:1000]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:1000]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
par(mar = c(4, 4, 1, 1))
plot(density(priors$innov_prob[order(results)[1:100000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$learn_prob[order(results)[1:100000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$n_top[order(results)[1:100000]]), xlim = c(min(priors$n_top), max(priors$n_top)), main = "")
plot(density(priors$adj_poss[order(results)[1:100000]]), xlim = c(min(priors$adj_poss), max(priors$adj_poss)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:100000]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:100000]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:100000]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
length(results_0)
results <- c(unlist(results_0))
results
priors <- priors[1:length(results), ]
plot(density(priors$innov_prob[order(results)[1:1000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$learn_prob[order(results)[1:1000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$n_top[order(results)[1:1000]]), xlim = c(min(priors$n_top), max(priors$n_top)), main = "")
plot(density(priors$adj_poss[order(results)[1:1000]]), xlim = c(min(priors$adj_poss), max(priors$adj_poss)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:1000]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:1000]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:1000]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
plot(density(priors$innov_prob[order(results)[1:10000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$learn_prob[order(results)[1:10000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$n_top[order(results)[1:10000]]), xlim = c(min(priors$n_top), max(priors$n_top)), main = "")
plot(density(priors$adj_poss[order(results)[1:10000]]), xlim = c(min(priors$adj_poss), max(priors$adj_poss)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:10000]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:10000]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:10000]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
results <- c(unlist(results_0))[1:1000000]
priors <- priors[1:length(results), ]
par(mar = c(4, 4, 1, 1))
plot(density(priors$innov_prob[order(results)[1:10000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$learn_prob[order(results)[1:10000]]), xlim = c(min(priors$innov_prob), max(priors$innov_prob)), main = "")
plot(density(priors$n_top[order(results)[1:10000]]), xlim = c(min(priors$n_top), max(priors$n_top)), main = "")
plot(density(priors$adj_poss[order(results)[1:10000]]), xlim = c(min(priors$adj_poss), max(priors$adj_poss)), main = "")
plot(density(priors$improve_rate_m[order(results)[1:10000]]), xlim = c(min(priors$improve_rate_m), max(priors$improve_rate_m)), main = "")
plot(density(priors$improve_rate_sd[order(results)[1:10000]]), xlim = c(min(priors$improve_rate_sd), max(priors$improve_rate_sd)), main = "")
plot(density(priors$improve_min[order(results)[1:10000]]), xlim = c(min(priors$improve_min), max(priors$improve_min)), main = "")
density(priors$innov_prob[order(results)[1:10000]])
hai <- density(priors$innov_prob[order(results)[1:10000]])
hai
hai$x
hai$y
hai$x
?density
hai <- density(priors$innov_prob[order(results)[1:10000]], from = min(priors$innov_prob), to = max(priors$innov_prob))
hai$x
hai$y
hai <- density(priors$innov_prob[order(results)[1:10000]], from = min(priors$innov_prob), to = max(priors$innov_prob))
sample(hai$x, 1000, replace = TRUE, prob = hai$y)
sample(hai$x, 100, replace = TRUE, prob = hai$y)
hist(sample(hai$x, 100, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 100, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 100, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 100, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 100, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
hist(sample(hai$x, 1000000, replace = TRUE, prob = hai$y))
#number of simulations per round
n_sim <- 1000000
#tolerance level per round
tol <- 0.01
n_sim*tol
i <- 1
as.character(i)
as.character(i)
paste0("_rslurm_", i, "/params.RDS")
paste0("_rslurm_", i, "/results_0.RDS")
density(priors$innov_prob[order(results)[1:(n_sim*tol)]], from = min(priors$innov_prob), to = max(priors$innov_prob))
innov_prob_post <- density(priors$innov_prob[order(results)[1:(n_sim*tol)]], from = min(priors$innov_prob), to = max(priors$innov_prob))
sample(innov_prob_post$x, n_sim, replace = TRUE, prob = innov_prob_post$y)
hist(sample(innov_prob_post$x, n_sim, replace = TRUE, prob = innov_prob_post$y))
hist(sample(innov_prob_post$x, n_sim, replace = TRUE, prob = innov_prob_post$y))
hist(sample(innov_prob_post$x, n_sim, replace = TRUE, prob = innov_prob_post$y))
hist(sample(innov_prob_post$x, n_sim, replace = TRUE, prob = innov_prob_post$y))
sample(innov_prob_post$x, n_sim, replace = TRUE, prob = innov_prob_post$y)
?rslurm::slurm_apply
list(1, 2, 3)
unlist(list(1, 2, 3))
unlist(c(1, 2, 32))
