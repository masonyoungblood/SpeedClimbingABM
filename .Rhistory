init_times <- data[which(data$year == years[1]), ]$time
#restructure data for BSL
data <- lapply(years, function(x){data$time[which(data$year == x)]})
#needs vector of parameters in order: innov_prob, learn_prob, n_top, adj_poss, improve_rate_m, improve_rate_sd, improve_min
SpeedClimbingBSL <- function(params){
SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times, n_holds = 20, beta_true_prob = 1,
innov_prob = exp(params[1]), learn_prob = exp(params[2]), n_top = exp(params[3]), adj_poss = exp(params[4]),
improve_rate_m = exp(params[5]), improve_rate_sd = exp(params[6]), improve_min = exp(params[7]),
sum_stats = FALSE, plot = FALSE)
}
sum_stats_fn <- function(data){
#c(t(sapply(1:length(data), function(x){quantile(data[[x]], probs = seq(0, 1, 0.1))})))
c(t(sapply(2:length(data), function(x){quantile(data[[x]], probs = seq(0, 1, 0.2))})))
}
log_prior_fn <- function(params){
log(prod(truncnorm::dtruncnorm(exp(params[1]), a = 0, b = 0.5, mean = 0, sd = 0.1),
truncnorm::dtruncnorm(exp(params[2]), a = 0, b = 0.5, mean = 0, sd = 0.1),
dunif(exp(params[3]), min = 1, max = 34),
dunif(exp(params[4]), min = 1, max = 2),
dunif(exp(params[5]), min = 1, max = 6),
truncnorm::dtruncnorm(exp(params[6]), a = 0, b = 4, mean = 0, sd = 2),
truncnorm::dtruncnorm(exp(params[7]), a = 0, b = 1, mean = 0.5, sd = 0.2)))
}
model <- newModel(fnSim = SpeedClimbingBSL, fnSum = sum_stats_fn, fnLogPrior = log_prior_fn,
theta0 = log(c(0.001, 0.001, 17, 1.5, 2.5, 0, 0.5)),
thetaNames = c("innov_prob", "learn_prob", "n_top", "adj_poss", "improve_rate_m", "improve_rate_sd", "improve_min"),
test = TRUE)
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
start <- Sys.time()
white_mat <- estimateWhiteningMatrix(10000, model, thetaPoint = log(c(0.001, 0.001, 17, 1.5, 2.5, 0, 0.5)), parallel = TRUE)
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
cov_mat <- matrix(0, nrow = 7, ncol = 7)
diag(cov_mat) <- 0.001
#cov_mat <- LaplacesDemon::rsiw(8, diag(7), rep(0, 7), rep(1, 7))
#cov_mat <- LaplacesDemon::rinvwishart(200, diag(7))
#hist(c(cov_mat), breaks = 5)
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE)
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
setwd("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
source("SpeedClimbingABM.R", local = TRUE)
library(bettermc)
library(parallel)
library(abcrf)
library(EasyABC)
library(BSL)
library(doParallel)
library(doRNG)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
#restructure data for BSL
data <- lapply(years, function(x){data$time[which(data$year == x)]})
#needs vector of parameters in order: innov_prob, learn_prob, n_top, adj_poss, improve_rate_m, improve_rate_sd, improve_min
SpeedClimbingBSL <- function(params){
SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times, n_holds = 20, beta_true_prob = 1,
innov_prob = exp(params[1]), learn_prob = exp(params[2]), n_top = exp(params[3]), adj_poss = exp(params[4]),
improve_rate_m = exp(params[5]), improve_rate_sd = exp(params[6]), improve_min = exp(params[7]),
sum_stats = FALSE, plot = FALSE)
}
sum_stats_fn <- function(data){
#c(t(sapply(1:length(data), function(x){quantile(data[[x]], probs = seq(0, 1, 0.1))})))
c(t(sapply(2:length(data), function(x){quantile(data[[x]], probs = seq(0, 1, 0.2))})))
}
log_prior_fn <- function(params){
log(prod(truncnorm::dtruncnorm(exp(params[1]), a = 0, b = 0.5, mean = 0, sd = 0.1),
truncnorm::dtruncnorm(exp(params[2]), a = 0, b = 0.5, mean = 0, sd = 0.1),
dunif(exp(params[3]), min = 1, max = 34),
dunif(exp(params[4]), min = 1, max = 2),
dunif(exp(params[5]), min = 1, max = 6),
truncnorm::dtruncnorm(exp(params[6]), a = 0, b = 4, mean = 0, sd = 2),
truncnorm::dtruncnorm(exp(params[7]), a = 0, b = 1, mean = 0.5, sd = 0.2)))
}
model <- newModel(fnSim = SpeedClimbingBSL, fnSum = sum_stats_fn, fnLogPrior = log_prior_fn,
theta0 = log(c(0.02, 0.02, 17, 1.5, 2.5, 0, 0.5)),
thetaNames = c("innov_prob", "learn_prob", "n_top", "adj_poss", "improve_rate_m", "improve_rate_sd", "improve_min"),
test = TRUE)
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
start <- Sys.time()
white_mat <- estimateWhiteningMatrix(10000, model, thetaPoint = log(c(0.02, 0.02, 17, 1.5, 2.5, 0, 0.5)), parallel = TRUE)
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
cov_mat <- matrix(0, nrow = 7, ncol = 7)
diag(cov_mat) <- 0.01
#cov_mat <- LaplacesDemon::rsiw(8, diag(7), rep(0, 7), rep(1, 7))
#cov_mat <- LaplacesDemon::rinvwishart(200, diag(7))
#hist(c(cov_mat), breaks = 5)
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE)
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
matrix(c(0, 0.5, 0, 0.5, 1, 34, 1, 2, 1, 6, 0, 4, 0, 1), ncol = 2, byrow = TRUE)
setwd("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
source("SpeedClimbingABM.R", local = TRUE)
library(bettermc)
library(parallel)
library(abcrf)
library(EasyABC)
library(BSL)
library(doParallel)
library(doRNG)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
#restructure data for BSL
data <- lapply(years, function(x){data$time[which(data$year == x)]})
#needs vector of parameters in order: innov_prob, learn_prob, n_top, adj_poss, improve_rate_m, improve_rate_sd, improve_min
SpeedClimbingBSL <- function(params){
SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times, n_holds = 20, beta_true_prob = 1,
innov_prob = params[1], learn_prob = params[2], n_top = params[3], adj_poss = params[4],
improve_rate_m = params[5], improve_rate_sd = params[6], improve_min = params[7],
sum_stats = FALSE, plot = FALSE)
}
sum_stats_fn <- function(data){
#c(t(sapply(1:length(data), function(x){quantile(data[[x]], probs = seq(0, 1, 0.1))})))
c(t(sapply(2:length(data), function(x){quantile(data[[x]], probs = seq(0, 1, 0.2))})))
}
log_prior_fn <- function(params){
log(prod(truncnorm::dtruncnorm(params[1], a = 0, b = 0.5, mean = 0, sd = 0.1),
truncnorm::dtruncnorm(params[2], a = 0, b = 0.5, mean = 0, sd = 0.1),
dunif(params[3], min = 1, max = 34),
dunif(params[4], min = 1, max = 2),
dunif(params[5], min = 1, max = 6),
truncnorm::dtruncnorm(params[6], a = 0, b = 4, mean = 0, sd = 2),
truncnorm::dtruncnorm(params[7], a = 0, b = 1, mean = 0.5, sd = 0.2)))
}
model <- newModel(fnSim = SpeedClimbingBSL, fnSum = sum_stats_fn, fnLogPrior = log_prior_fn,
theta0 = log(c(0.02, 0.02, 17, 1.5, 2.5, 0, 0.5)),
thetaNames = c("innov_prob", "learn_prob", "n_top", "adj_poss", "improve_rate_m", "improve_rate_sd", "improve_min"),
test = TRUE)
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
start <- Sys.time()
white_mat <- estimateWhiteningMatrix(10000, model, thetaPoint = log(c(0.02, 0.02, 17, 1.5, 2.5, 0, 0.5)), parallel = TRUE)
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
cov_mat <- matrix(0, nrow = 7, ncol = 7)
diag(cov_mat) <- 0.01
#cov_mat <- LaplacesDemon::rsiw(8, diag(7), rep(0, 7), rep(1, 7))
#cov_mat <- LaplacesDemon::rinvwishart(200, diag(7))
#hist(c(cov_mat), breaks = 5)
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0, 0.5, 0, 0.5, 1, 34, 1, 2, 1, 6, 0, 4, 0, 1), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
setwd("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
source("SpeedClimbingABM.R", local = TRUE)
library(bettermc)
library(parallel)
library(abcrf)
library(EasyABC)
library(BSL)
library(doParallel)
library(doRNG)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
#restructure data for BSL
data <- lapply(years, function(x){data$time[which(data$year == x)]})
#needs vector of parameters in order: innov_prob, learn_prob, n_top, adj_poss, improve_rate_m, improve_rate_sd, improve_min
SpeedClimbingBSL <- function(params){
SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times, n_holds = 20, beta_true_prob = 1,
innov_prob = params[1], learn_prob = params[2], n_top = params[3], adj_poss = params[4],
improve_rate_m = params[5], improve_rate_sd = params[6], improve_min = params[7],
sum_stats = FALSE, plot = FALSE)
}
sum_stats_fn <- function(data){
#c(t(sapply(1:length(data), function(x){quantile(data[[x]], probs = seq(0, 1, 0.1))})))
c(t(sapply(2:length(data), function(x){quantile(data[[x]], probs = seq(0, 1, 0.2))})))
}
log_prior_fn <- function(params){
log(prod(truncnorm::dtruncnorm(params[1], a = 0, b = 0.5, mean = 0, sd = 0.1),
truncnorm::dtruncnorm(params[2], a = 0, b = 0.5, mean = 0, sd = 0.1),
dunif(params[3], min = 1, max = 34),
dunif(params[4], min = 1, max = 2),
dunif(params[5], min = 1, max = 6),
truncnorm::dtruncnorm(params[6], a = 0, b = 4, mean = 0, sd = 2),
truncnorm::dtruncnorm(params[7], a = 0, b = 1, mean = 0.5, sd = 0.2)))
}
model <- newModel(fnSim = SpeedClimbingBSL, fnSum = sum_stats_fn, fnLogPrior = log_prior_fn,
theta0 = c(0.02, 0.02, 17, 1.5, 2.5, 0, 0.5),
thetaNames = c("innov_prob", "learn_prob", "n_top", "adj_poss", "improve_rate_m", "improve_rate_sd", "improve_min"),
test = TRUE)
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
start <- Sys.time()
white_mat <- estimateWhiteningMatrix(10000, model, thetaPoint = c(0.02, 0.02, 17, 1.5, 2.5, 0, 0.5), parallel = TRUE)
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
cov_mat <- matrix(0, nrow = 7, ncol = 7)
diag(cov_mat) <- 0.01
#cov_mat <- LaplacesDemon::rsiw(8, diag(7), rep(0, 7), rep(1, 7))
#cov_mat <- LaplacesDemon::rinvwishart(200, diag(7))
#hist(c(cov_mat), breaks = 5)
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0, 0.5, 0, 0.5, 1, 34, 1, 2, 1, 6, 0, 4, 0, 1), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-0.0001, 0.5+0.0001, 0-0.0001, 0.5+0.0001, 1-0.0001, 34+0.0001, 1-0.0001, 2+0.0001, 1-0.0001, 6+0.0001, 0-0.0001, 4+0.0001, 0-0.0001, 1+0.0001), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
buff <- 0.000000000001
cov_mat <- matrix(0, nrow = 7, ncol = 7)
diag(cov_mat) <- 0.1
#cov_mat <- LaplacesDemon::rsiw(8, diag(7), rep(0, 7), rep(1, 7))
#cov_mat <- LaplacesDemon::rinvwishart(200, diag(7))
#hist(c(cov_mat), breaks = 5)
buff <- 0.000000000001
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
diag(cov_mat) <- 0.0001
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
diag(cov_mat) <- 0.0000001
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
diag(cov_mat) <- 0.0001
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
plot(sup@theta[, 5], type = "l")
plot(sup@theta[, 3], type = "l")
plot(sup@theta[, 2], type = "l")
plot(sup@theta[, 3], type = "l")
plot(sup@theta[, 6], type = "l")
plot(sup@theta[, 1], type = "l")
plot(sup@theta[, 2], type = "l")
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0.5, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
#diag(cov_mat) <- 0.0001
diag(cov_mat) <- 0.001
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0.5, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
cov_mat <- matrix(0.00001, nrow = 7, ncol = 7)
#diag(cov_mat) <- 0.0001
diag(cov_mat) <- 0.001
#cov_mat <- LaplacesDemon::rsiw(8, diag(7), rep(0, 7), rep(1, 7))
#cov_mat <- LaplacesDemon::rinvwishart(200, diag(7))
#hist(c(cov_mat), breaks = 5)
buff <- 0.000000000001
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
cov_mat <- matrix(0.1, nrow = 7, ncol = 7)
#diag(cov_mat) <- 0.0001
diag(cov_mat) <- 0.001
#cov_mat <- LaplacesDemon::rsiw(8, diag(7), rep(0, 7), rep(1, 7))
#cov_mat <- LaplacesDemon::rinvwishart(200, diag(7))
#hist(c(cov_mat), breaks = 5)
buff <- 0.000000000001
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
#diag(cov_mat) <- 0.0001
diag(cov_mat) <- 0.5
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
cov_mat <- matrix(0, nrow = 7, ncol = 7)
diag(cov_mat) <- 0.001
#cov_mat <- LaplacesDemon::rsiw(8, diag(7), rep(0, 7), rep(1, 7))
#cov_mat <- LaplacesDemon::rinvwishart(200, diag(7))
#hist(c(cov_mat), breaks = 5)
buff <- 0.000000000001
ncores <- detectCores()
cl <- makeCluster(ncores-1)
clusterExport(cl, varlist = ls())
registerDoParallel(cl)
registerDoRNG(1)
#source("SpeedClimbingABM.R", local = TRUE)
start <- Sys.time()
sup <- bsl(y = data, n = 10, M = 500, model = model, method = "semiBSL",
shrinkage = "Warton", penalty = 0, whitening = white_mat,
covRandWalk = cov_mat, verbose = 1L, parallel = TRUE,
logitTransformBound = matrix(c(0-buff, 0.5+buff, 0-buff, 0.5+buff, 1-buff, 34+buff, 1-buff, 2+buff, 1-buff, 6+buff, 0-buff, 4+buff, 0-buff, 1+buff), ncol = 2, byrow = TRUE))
Sys.time()-start
stopCluster(cl)
registerDoSEQ()
