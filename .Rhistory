setwd("~/Downloads/dataverse_files")
data <- read.csv("rabbit_data.csv")
#load libraries
library(MCMCglmm)
library(rptR)
#re-code open_retr as binary
data$open_retr[!is.na(data$open_retr)] <- 1
data$open_retr[is.na(data$open_retr)] <- 0
#convert data to long format
ind <- c()
expl <- c()
laten <- c()
month <- c()
open_retr <- c()
labyr_exit <- c()
labyr_retr <- c()
sex <- c()
for(i in 1:nrow(data)){
ind <- c(ind, rep(as.character(data$ind[i]), 2))
expl <- c(expl, data$expl_1[i], data$expl_2[i])
laten <- c(laten, data$laten_1[i], data$laten_2[i])
month <- c(month, 1, 2)
open_retr <- c(open_retr, rep(data$open_retr[i], 2))
labyr_exit <- c(labyr_exit, rep(data$labyr_exit[i], 2))
labyr_retr <- c(labyr_retr, rep(data$labyr_retr[i], 2))
sex <- c(sex, rep(data$sex[i], 2))
}
#scale long variables
expl <- scale(expl)
laten <- scale(laten)
labyr_exit <- scale(labyr_exit)
labyr_retr <- scale(labyr_retr)
#convert to data frame
long_data <- data.frame(ind, sex, expl, laten, month, open_retr, labyr_exit, labyr_retr)
long_data$ind <- as.character(long_data$ind)
#scale the original data for sex differences in cognitive traits
data$expl_1 <- scale(data$expl_1)
data$expl_2 <- scale(data$expl_2)
data$laten_1 <- scale(data$laten_1)
data$laten_2 <- scale(data$laten_2)
data$labyr_exit <- scale(data$labyr_exit)
data$labyr_retr <- scale(data$labyr_retr)
expl
long_data$expl
hist(long_data$expl)
hist(long_data$laten)
hist(long_data$laten, breaks = 10)
hist(long_data$laten, breaks = 20)
#load data sheet
data <- read.csv("rabbit_data.csv")
#load libraries
library(MCMCglmm)
library(rptR)
#re-code open_retr as binary
data$open_retr[!is.na(data$open_retr)] <- 1
data$open_retr[is.na(data$open_retr)] <- 0
#convert data to long format
ind <- c()
expl <- c()
laten <- c()
month <- c()
open_retr <- c()
labyr_exit <- c()
labyr_retr <- c()
sex <- c()
for(i in 1:nrow(data)){
ind <- c(ind, rep(as.character(data$ind[i]), 2))
expl <- c(expl, data$expl_1[i], data$expl_2[i])
laten <- c(laten, data$laten_1[i], data$laten_2[i])
month <- c(month, 1, 2)
open_retr <- c(open_retr, rep(data$open_retr[i], 2))
labyr_exit <- c(labyr_exit, rep(data$labyr_exit[i], 2))
labyr_retr <- c(labyr_retr, rep(data$labyr_retr[i], 2))
sex <- c(sex, rep(data$sex[i], 2))
}
expl
hist(expl)
hist(laten)
laten
log(laten)
hist(log(laten))
laten
plot(laten)
hist(laten, breaks = 10)
open_retr
hist(labyr_exit)
labyr_retr
hist(labyr_retr)
log(labyr_retr)
hist(log(labyr_retr))
hist(log(labyr_exit))
hist(log(labyr_exit), breaks = 100)
hist(log(labyr_exit), breaks = 10)
hist(log(labyr_retr), breaks = 10)
#load data sheet
data <- read.csv("rabbit_data.csv")
#load libraries
library(MCMCglmm)
library(rptR)
#re-code open_retr as binary
data$open_retr[!is.na(data$open_retr)] <- 1
data$open_retr[is.na(data$open_retr)] <- 0
#convert data to long format
ind <- c()
expl <- c()
laten <- c()
month <- c()
open_retr <- c()
labyr_exit <- c()
labyr_retr <- c()
sex <- c()
for(i in 1:nrow(data)){
ind <- c(ind, rep(as.character(data$ind[i]), 2))
expl <- c(expl, data$expl_1[i], data$expl_2[i])
laten <- c(laten, data$laten_1[i], data$laten_2[i])
month <- c(month, 1, 2)
open_retr <- c(open_retr, rep(data$open_retr[i], 2))
labyr_exit <- c(labyr_exit, rep(data$labyr_exit[i], 2))
labyr_retr <- c(labyr_retr, rep(data$labyr_retr[i], 2))
sex <- c(sex, rep(data$sex[i], 2))
}
#scale long variables
expl <- scale(expl)
laten <- scale(laten)
labyr_exit <- scale(labyr_exit)
labyr_retr <- scale(labyr_retr)
#convert to data frame
long_data <- data.frame(ind, sex, expl, laten, month, open_retr, labyr_exit, labyr_retr)
long_data$ind <- as.character(long_data$ind)
#scale the original data for sex differences in cognitive traits
data$expl_1 <- scale(data$expl_1)
data$expl_2 <- scale(data$expl_2)
data$laten_1 <- scale(data$laten_1)
data$laten_2 <- scale(data$laten_2)
data$labyr_exit <- scale(data$labyr_exit)
data$labyr_retr <- scale(data$labyr_retr)
#run bivariate analysis with expl and laten as outcome variables, month, sex, open_retr, labyr_exit, and labyr_retr as fixed effects, and ind as random effect, with inverse gamma priors
biv_ig_prior <- list(R = list(V = diag(2), nu = 1.002),
G = list(G1 = list(V = diag(2), nu = 1.002)))
hist(expl)
hist(laten)
biv_for_eff <- MCMCglmm(cbind(expl, log(laten)) ~ trait - 1 + trait:scale(month, scale = FALSE) + trait:scale(sex, scale = FALSE) + trait:scale(open_retr, scale = FALSE) + trait:labyr_exit + trait:labyr_retr,
random = ~ us(trait):ind,
rcov = ~ us(trait):units,
data = long_data,
family = c("gaussian", "gaussian"),
burnin = 1000, nitt = 100000, thin = 10,
prior = biv_ig_prior)
sumary(biv_for_eff)
summary(biv_for_eff)
biv_for_eff <- MCMCglmm(cbind(expl, laten) ~ trait - 1 + trait:scale(month, scale = FALSE) + trait:scale(sex, scale = FALSE) + trait:scale(open_retr, scale = FALSE) + trait:labyr_exit + trait:labyr_retr,
random = ~ us(trait):ind,
rcov = ~ us(trait):units,
data = long_data,
family = c("gaussian", "gaussian"),
burnin = 1000, nitt = 100000, thin = 10,
prior = biv_ig_prior)
biv_for_eff
biv_for_eff <- MCMCglmm(cbind(expl, laten) ~ trait - 1 + trait:scale(month, scale = FALSE) + trait:scale(sex, scale = FALSE) + trait:scale(open_retr, scale = FALSE) + trait:labyr_exit + trait:labyr_retr,
random = ~ us(trait):ind,
rcov = ~ us(trait):units,
data = long_data,
family = c("gaussian", "gaussian"),
burnin = 1000, nitt = 100000, thin = 10,
prior = biv_ig_prior)
summary(biv_for_eff)
?rptGaussian
#run bivariate analysis with expl and laten as outcome variables, month, sex, open_retr, labyr_exit, and labyr_retr as fixed effects, and ind as random effect, with inverse gamma priors
biv_ig_prior <- list(R = list(V = diag(2), nu = 1.002),
G = list(G1 = list(V = diag(2), nu = 1.002)))
biv_for_eff <- MCMCglmm(cbind(expl, log(laten)) ~ trait - 1 + trait:scale(month, scale = FALSE) + trait:scale(sex, scale = FALSE) + trait:scale(open_retr, scale = FALSE) + trait:labyr_exit + trait:labyr_retr,
random = ~ us(trait):ind,
rcov = ~ us(trait):units,
data = long_data,
family = c("gaussian", "gaussian"),
burnin = 1000, nitt = 100000, thin = 10,
prior = biv_ig_prior)
#run bivariate analysis with expl and laten as outcome variables, month, sex, open_retr, labyr_exit, and labyr_retr as fixed effects, and ind as random effect, with inverse gamma priors
biv_ig_prior <- list(R = list(V = diag(2), nu = 1.002),
G = list(G1 = list(V = diag(2), nu = 1.002)))
biv_for_eff <- MCMCglmm(cbind(expl, scale(log(laten))) ~ trait - 1 + trait:scale(month, scale = FALSE) + trait:scale(sex, scale = FALSE) + trait:scale(open_retr, scale = FALSE) + trait:labyr_exit + trait:labyr_retr,
random = ~ us(trait):ind,
rcov = ~ us(trait):units,
data = long_data,
family = c("gaussian", "gaussian"),
burnin = 1000, nitt = 100000, thin = 10,
prior = biv_ig_prior)
summary(biv_for_eff)
laten_rpt <- rptGaussian(log(laten) ~ (1 | ind), data = long_data, grname = "ind", nboot = 10000, npermut = 100000)
BBmisc::normalize(c(1, 2, 3, 4, 5), "range", c(-1, 1))
BBmisc::normalize(c(1, 2, 3, 4, 5), "range", c(-1, 1))
BBmisc::normalize(c(1, 2, 3, 4, 5), "range", c(-1, 1))
BBmisc::normalize(c(1, 2, 3, 4, 5), "range", c(-1, 1))
learn_x_times = 0
learn_x_pop = 0
innov_x_times = 0
innov_x_pop = 0
learn_x_pop > 0 & learn_x_pop > 0
setwd("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
source("SpeedClimbingABM.R")
bounded_exp <- compiler::cmpfun(bounded_exp)
SpeedClimbingABM <- compiler::cmpfun(SpeedClimbingABM)
library(abc)
load("data.RData")
#get all unique climbers
uniq_climbers <- unique(data$athlete)
#separate continuous sequences of years
seqs <- lapply(uniq_climbers, function(x){split(data$year[which(data$athlete == x)], cumsum(seq_along(data$year[which(data$athlete == x)]) %in% (which(diff(data$year[which(data$athlete == x)]) > 1) + 1)))})
#for each unique climber, iterate through their sequences, and and extract their ID, start year, end year, and time in start year (separate row per sequence)
pop_data <- data.table::data.table(do.call(rbind, lapply(1:length(uniq_climbers), function(i){
t(sapply(1:length(seqs[[i]]), function(j){
c(uniq_climbers[i], min(unlist(seqs[[i]][j])), max(unlist(seqs[[i]][j])), data$time[which(data$athlete == uniq_climbers[i] & data$year == min(unlist(seqs[[i]][j])))])
}))
})))
colnames(pop_data) <- c("ID", "start", "end", "time")
pop_data
pop_data <- pop_data[which(data$gender[match(pop_data$ID, data$athlete)] == "M"), ]
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
iters <- 1000000
priors <- data.frame(innov_prob = truncnorm::rtruncnorm(iters, a = 0, b = 0.5, mean = 0, sd = 0.1), learn_prob = truncnorm::rtruncnorm(iters, a = 0, b = 0.5, mean = 0, sd = 0.1),
n_top = runif(iters, min = 1, max = 34), adj_poss = runif(iters, 1, 2),
improve_rate_m = runif(iters, min = 1, max = 4), improve_rate_sd = truncnorm::rtruncnorm(iters, a = 0, mean = 0, sd = 2),
improve_min = runif(iters, min = 0, max = 0.5))
simulations <- bettermc::mclapply(1:iters, function(x){SpeedClimbingABM(n = n, years = years, pop_data = pop_data, n_holds = 20,
beta_true_prob = 1, learn_prob = priors$learn_prob[x], n_top = priors$n_top[x],
innov_prob = priors$innov_prob[x], adj_poss = priors$adj_poss[x],
improve_rate_m = priors$improve_rate_m[x], improve_rate_sd = priors$improve_rate_sd[x], improve_min = priors$improve_min[x],
sum_stats = TRUE, plot = FALSE)}, mc.cores = 7, mc.retry = 5, mc.allow.error = TRUE, mc.allow.fatal = TRUE)
test <- list(priors = priors, simulations = simulations)
save(test, file = "~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/test.RData")
setwd("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
source("SpeedClimbingABM.R")
bounded_exp <- compiler::cmpfun(bounded_exp)
SpeedClimbingABM <- compiler::cmpfun(SpeedClimbingABM)
library(abc)
load("data.RData")
#get all unique climbers
uniq_climbers <- unique(data$athlete)
#separate continuous sequences of years
seqs <- lapply(uniq_climbers, function(x){split(data$year[which(data$athlete == x)], cumsum(seq_along(data$year[which(data$athlete == x)]) %in% (which(diff(data$year[which(data$athlete == x)]) > 1) + 1)))})
#for each unique climber, iterate through their sequences, and and extract their ID, start year, end year, and time in start year (separate row per sequence)
pop_data <- data.table::data.table(do.call(rbind, lapply(1:length(uniq_climbers), function(i){
t(sapply(1:length(seqs[[i]]), function(j){
c(uniq_climbers[i], min(unlist(seqs[[i]][j])), max(unlist(seqs[[i]][j])), data$time[which(data$athlete == uniq_climbers[i] & data$year == min(unlist(seqs[[i]][j])))])
}))
})))
colnames(pop_data) <- c("ID", "start", "end", "time")
pop_data
pop_data <- pop_data[which(data$gender[match(pop_data$ID, data$athlete)] == "M"), ]
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
iters <- 2000000
priors <- data.frame(innov_prob = truncnorm::rtruncnorm(iters, a = 0, b = 0.5, mean = 0, sd = 0.1), learn_prob = truncnorm::rtruncnorm(iters, a = 0, b = 0.5, mean = 0, sd = 0.1),
n_top = runif(iters, min = 1, max = 34), adj_poss = runif(iters, 1, 2),
improve_rate_m = runif(iters, min = 1, max = 4), improve_rate_sd = truncnorm::rtruncnorm(iters, a = 0, mean = 0, sd = 2),
improve_min = runif(iters, min = 0, max = 0.5))
simulations <- bettermc::mclapply(1:iters, function(x){SpeedClimbingABM(n = n, years = years, pop_data = pop_data, n_holds = 20,
beta_true_prob = 1, learn_prob = priors$learn_prob[x], n_top = priors$n_top[x],
innov_prob = priors$innov_prob[x], adj_poss = priors$adj_poss[x],
improve_rate_m = priors$improve_rate_m[x], improve_rate_sd = priors$improve_rate_sd[x], improve_min = priors$improve_min[x],
sum_stats = TRUE, plot = FALSE)}, mc.cores = 7, mc.retry = 5, mc.allow.error = TRUE, mc.allow.fatal = TRUE)
test <- list(priors = priors, simulations = simulations)
save(test, file = "~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/test.RData")
