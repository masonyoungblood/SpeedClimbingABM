add_phylopic_base(finch, fill = "black", height = 0.08, x = 1.44, y = 1.585)
dev.off()
#load libraries
library(openxlsx)
library(brms)
library(ggplot2)
library(cowplot)
library(gtools)
library(rphylopic)
library(ggdendro)
library(cluster)
library(flextable)
library(dplyr)
library(ftExtra)
library(officer)
#set working directory
setwd("/Users/masonyoungblood/Documents/Work/Summer 2025/zebra_finch_efficiency/docs")
#load data
data <- read.xlsx("data/james_sakata_2017.xlsx")
#apply hierarchical clustering to features of novel syllables, alongside identity of birds
clust_feats <- scale(data[which(data$SyllableID == "n"), 5:7])
clust_feats <- cbind(data.frame(clust_feats), factor(data[which(data$SyllableID == "n"), ]$BirdID))
dist_mat <- daisy(clust_feats, metric = "gower")
heir_clust <- hclust(dist_mat, method = "ward.D2")
dendro <- dendro_data(heir_clust, type = "rectangle")
#get clusters at cut heights and add to data
clust <- data.frame(cutree(heir_clust, h = c(0.1, 0.3, 0.5)))
clust[, 1] <- as.character(clust[, 1])
clust[, 2] <- as.character(clust[, 2])
clust[, 3] <- as.character(clust[, 3])
data$syl_id_imp_lo <- data$SyllableID
data$syl_id_imp_md <- data$SyllableID
data$syl_id_imp_hi <- data$SyllableID
data$syl_id_imp_lo[which(data$SyllableID == "n")] <- clust[, 1]
data$syl_id_imp_md[which(data$SyllableID == "n")] <- clust[, 2]
data$syl_id_imp_hi[which(data$SyllableID == "n")] <- clust[, 3]
#check cut heights
png("plots/cut_heights.png", width = 2.4, height = 2, units = "in", res = 1200)
ggplot(segment(dendro)) +
geom_hline(yintercept = 0.1, color = "#0072B2") +
geom_hline(yintercept = 0.3, color = "#D55E00") +
geom_hline(yintercept = 0.5, color = "#009E73") +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
xlab("Novel syllables") +
ylab("Cut height") +
theme_linedraw(base_family = "Avenir") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
dev.off()
#load libraries
library(openxlsx)
library(brms)
library(ggplot2)
library(cowplot)
library(gtools)
library(rphylopic)
library(ggdendro)
library(cluster)
library(flextable)
library(dplyr)
library(ftExtra)
library(officer)
#set working directory
setwd("/Users/masonyoungblood/Documents/Work/Summer 2025/zebra_finch_efficiency/docs")
#load data
data <- read.xlsx("data/james_sakata_2017.xlsx")
#apply hierarchical clustering to features of novel syllables, alongside identity of birds
clust_feats <- scale(data[which(data$SyllableID == "n"), 5:7])
clust_feats <- cbind(data.frame(clust_feats), factor(data[which(data$SyllableID == "n"), ]$BirdID))
dist_mat <- daisy(clust_feats, metric = "gower")
heir_clust <- hclust(dist_mat, method = "ward.D2")
dendro <- dendro_data(heir_clust, type = "rectangle")
#get clusters at cut heights and add to data
clust <- data.frame(cutree(heir_clust, h = c(0.1, 0.3, 0.5)))
clust[, 1] <- as.character(clust[, 1])
clust[, 2] <- as.character(clust[, 2])
clust[, 3] <- as.character(clust[, 3])
data$syl_id_imp_lo <- data$SyllableID
data$syl_id_imp_md <- data$SyllableID
data$syl_id_imp_hi <- data$SyllableID
data$syl_id_imp_lo[which(data$SyllableID == "n")] <- clust[, 1]
data$syl_id_imp_md[which(data$SyllableID == "n")] <- clust[, 2]
data$syl_id_imp_hi[which(data$SyllableID == "n")] <- clust[, 3]
#add sequence id
seq_id <- c(1)
seq <- 1
for(i in 2:nrow(data)){
if(data$Position[i - 1] == "end"){
seq <- seq + 1
}
seq_id <- c(seq_id, seq)
}
data$seq_id <- seq_id
#reformat and un-log duration
data <- data[, c(1, 11, 3, 4, 8, 9, 10, 6)]
colnames(data) <- c("ind", "seq_id", "pos", "syl_id", "syl_id_imp_lo", "syl_id_imp_md", "syl_id_imp_hi", "dur")
data$dur <- 10^(data$dur)
#store median syllable durations
syl_durs <- c(
round(median(data$dur[which(data$syl_id == "a")])),
round(median(data$dur[which(data$syl_id == "b")])),
round(median(data$dur[which(data$syl_id == "c")])),
round(median(data$dur[which(data$syl_id == "d")])),
round(median(data$dur[which(data$syl_id == "e")]))
)
#get permuted sequences as per james and sakata 2017
rand_seqs <- permutations(n = 5, r = 5, v = 1:5)
rand_seqs <- unlist(lapply(1:120, function(x){rand_seqs[x, ]}))
#combine into data frame matching real data
rand_data <- data.frame(
ind = NA,
seq_id = rep(1:120, each = 5),
pos = rep(1:5, 120),
syl_id = c("a", "b", "c", "d", "e")[rand_seqs],
dur = syl_durs[rand_seqs],
freq = 120,
len = 5
)
rand_data$freq <- rand_data$freq/sum(rand_data$freq)
#add frequencies and ranks of syllables
freqs <- data.frame(table(data$syl_id))
colnames(freqs) <- c("syl_id", "freq")
freqs$rank <- c(6-rank(freqs$freq[1:5]), NA)
freqs$freq[6] <- NA
freqs$freq <- freqs$freq/sum(freqs$freq, na.rm = TRUE)
data$freq <- freqs$freq[match(data$syl_id, freqs$syl_id)]
data$freq[which(data$syl_id == "n")] <- NA
data$rank <- freqs$rank[match(data$syl_id, freqs$syl_id)]
#add frequencies and ranks of imputed syllables
freqs_imp_lo <- data.frame(table(data$syl_id_imp_lo))
freqs_imp_md <- data.frame(table(data$syl_id_imp_md))
freqs_imp_hi <- data.frame(table(data$syl_id_imp_hi))
colnames(freqs_imp_lo) <- c("syl_id", "freq")
colnames(freqs_imp_md) <- c("syl_id", "freq")
colnames(freqs_imp_hi) <- c("syl_id", "freq")
freqs_imp_lo$rank <- nrow(freqs_imp_lo)+1-rank(freqs_imp_lo$freq, ties.method = "first")
freqs_imp_md$rank <- nrow(freqs_imp_md)+1-rank(freqs_imp_md$freq, ties.method = "first")
freqs_imp_hi$rank <- nrow(freqs_imp_hi)+1-rank(freqs_imp_hi$freq, ties.method = "first")
freqs_imp_lo$freq <- freqs_imp_lo$freq/sum(freqs_imp_lo$freq)
freqs_imp_md$freq <- freqs_imp_md$freq/sum(freqs_imp_md$freq)
freqs_imp_hi$freq <- freqs_imp_hi$freq/sum(freqs_imp_hi$freq)
data$freq_imp_lo <- freqs_imp_lo$freq[match(data$syl_id_imp_lo, freqs_imp_lo$syl_id)]
data$freq_imp_md <- freqs_imp_md$freq[match(data$syl_id_imp_md, freqs_imp_md$syl_id)]
data$freq_imp_hi <- freqs_imp_hi$freq[match(data$syl_id_imp_hi, freqs_imp_hi$syl_id)]
data$rank_imp_lo <- freqs_imp_lo$rank[match(data$syl_id_imp_lo, freqs_imp_lo$syl_id)]
data$rank_imp_md <- freqs_imp_md$rank[match(data$syl_id_imp_md, freqs_imp_md$syl_id)]
data$rank_imp_hi <- freqs_imp_hi$rank[match(data$syl_id_imp_hi, freqs_imp_hi$syl_id)]
#add lengths of sequences (to both datasets)
lens <- data.frame(table(data$seq_id))
colnames(lens) <- c("seq_id", "len")
data$len <- lens$len[match(data$seq_id, lens$seq_id)]
#get best fit data for brevity
freq_vals <- seq(round(min(data[which(data$syl_id != "n"), ]$freq), 3), round(max(data[which(data$syl_id != "n"), ]$freq), 3), 0.001)
dur_vals_scaled <- fitted(brev_model, data.frame(freq = freq_vals), re_formula = NA, summary = TRUE)
#load models
load("models/brev_model.RData")
load("models/brev_model_imp_lo.RData")
load("models/brev_model_imp_md.RData")
load("models/brev_model_imp_hi.RData")
load("models/menz_model.RData")
load("models/rank_freq_model.RData")
load("models/rank_freq_model_imp_lo.RData")
load("models/rank_freq_model_imp_md.RData")
load("models/rank_freq_model_imp_hi.RData")
#get best fit data for brevity
freq_vals <- seq(round(min(data[which(data$syl_id != "n"), ]$freq), 3), round(max(data[which(data$syl_id != "n"), ]$freq), 3), 0.001)
dur_vals_scaled <- fitted(brev_model, data.frame(freq = freq_vals), re_formula = NA, summary = TRUE)
dur_vals <- exp(dur_vals_scaled*sd(log(data[which(data$syl_id != "n"), ]$dur)) + mean(log(data[which(data$syl_id != "n"), ]$dur)))
brev_fit <- data.frame(dur = dur_vals[, 1], freq = freq_vals, low = dur_vals[, 3], upp = dur_vals[, 4])
#plot brevity (on both datasets)
brev_plot <- ggplot() +
geom_ribbon(data = brev_fit, aes(x = freq, ymin = low, ymax = upp), fill = "#0072B2", alpha = 0.2) +
geom_point(data = data[which(data$syl_id != "n"), ], aes(x = freq, y = dur), color = "#0072B2") +
geom_line(data = brev_fit, aes(x = freq, y = dur), color = "#0072B2") +
ylab("Syllable duration (ms)") +
xlab("Frequency") +
coord_cartesian(ylim = c(25, 205)) +
theme_linedraw(base_family = "Avenir") +
theme(axis.text.y = element_text(angle = 90, hjust = 1))
rand_brev_plot <- ggplot() +
geom_jitter(data = rand_data, aes(x = freq, y = dur), color = "#0072B2", width = 0.00005, height = 3) +
geom_vline(xintercept = rand_data$freq[1], color = "#0072B2") +
ylab("Syllable duration (ms)") +
xlab("Frequency") +
coord_cartesian(xlim = c(0, 0.0032), ylim = c(25, 170)) +
theme_linedraw(base_family = "Avenir") +
theme(axis.text.y = element_text(angle = 90, hjust = 1))
#get best fit data for menzerath
len_vals <- seq(round(min(data$len), 1), round(max(data$len), 1), 0.1)
dur_vals_scaled <- fitted(menz_model, data.frame(len = len_vals), re_formula = NA, summary = TRUE)
dur_vals <- exp(dur_vals_scaled*sd(log(data[which(data$syl_id != "n"), ]$dur)) + mean(log(data[which(data$syl_id != "n"), ]$dur)))
menz_fit <- data.frame(dur = dur_vals[, 1], len = len_vals, low = dur_vals[, 3], upp = dur_vals[, 4])
#plot menzerath (on both datasets)
menz_plot <- ggplot() +
geom_ribbon(data = menz_fit, aes(x = len, ymin = low, ymax = upp), fill = "#D55E00", alpha = 0.2) +
geom_point(data = data, aes(x = len, y = dur), color = "#D55E00") +
geom_line(data = menz_fit, aes(x = len, y = dur), color = "#D55E00") +
xlab("Sequence length") +
ylab("Syllable duration (ms)") +
theme_linedraw(base_family = "Avenir") +
theme(axis.text.y = element_text(angle = 90, hjust = 1))
rand_menz_plot <- ggplot() +
geom_jitter(data = rand_data, aes(x = len, y = dur), color = "#D55E00", width = 0.1, height = 3) +
geom_vline(xintercept = 5, color = "#D55E00") +
xlab("Sequence length") +
ylab("Syllable duration (ms)") +
xlim(2, 8) +
theme_linedraw(base_family = "Avenir") +
theme(axis.text.y = element_text(angle = 90, hjust = 1))
#get best fit for rank-frequency law
rank_vals <- seq(1, 5, 0.1)
freq_vals <- fitted(rank_freq_model, data.frame(rank = rank_vals))
rank_freq_fit <- data.frame(freq = freq_vals[, 1], rank = rank_vals, low = freq_vals[, 3], upp = freq_vals[, 4])
rand_rank_freq_data <- data.frame(freq = 120, rank = 1:5)
rand_rank_freq_data$freq <- rand_rank_freq_data$freq/sum(rand_rank_freq_data$freq)
#plot rank-frequency
rank_freq_plot <- ggplot() +
geom_ribbon(data = rank_freq_fit, aes(x = rank, ymin = low, ymax = upp), fill = "#009E73", alpha = 0.2) +
geom_point(data = unique(data[, which(colnames(data) %in% c("freq", "rank"))])[-6, ], aes(x = rank, y = freq), color = "#009E73") +
geom_line(data = rank_freq_fit, aes(x = rank, y = freq), color = "#009E73") +
xlab("Rank") +
ylab("Frequency") +
scale_x_log10() +
scale_y_log10() +
theme_linedraw(base_family = "Avenir") +
theme(axis.text.y = element_text(angle = 90, hjust = 1))
rand_rank_freq_plot <- ggplot() +
geom_point(data = rand_rank_freq_data, aes(x = rank, y = freq), color = "#009E73") +
geom_hline(yintercept = rand_rank_freq_data$freq[1], color = "#009E73") +
xlab("Rank") +
ylab("Frequency") +
scale_x_log10() +
scale_y_log10() +
coord_cartesian(ylim = c(0.03, 1)) +
theme_linedraw(base_family = "Avenir") +
theme(axis.text.y = element_text(angle = 90, hjust = 1))
#create top and bottom rows
top_row <- plot_grid(rand_brev_plot, rand_menz_plot, rand_rank_freq_plot, nrow = 1, labels = c("a", "b", "c"), label_fontfamily = "Avenir Next", label_fontface = "bold")
bottom_row <- plot_grid(brev_plot, menz_plot, rank_freq_plot, nrow = 1, labels = c("d", "e", "f"), label_fontfamily = "Avenir Next", label_fontface = "bold")
#create titles
top_row_w_title <- plot_grid(
ggdraw() + draw_label("Distributions in tutor songs", fontfamily = "Avenir Next", fontface = "bold", size = 14, x = 0, hjust = 0), top_row,
ncol = 1, rel_heights = c(0.1, 1)
)
bottom_row_w_title <- plot_grid(
ggdraw() + draw_label("Distributions in learned songs", fontfamily = "Avenir Next", fontface = "bold", size = 14, x = 0, hjust = 0), bottom_row,
ncol = 1, rel_heights = c(0.1, 1)
)
column_titles <- plot_grid(
ggdraw() + draw_label("       Zipf's Law of Abbrev.", fontfamily = "Avenir Next", fontface = "bold", color = "#0072B2"),
ggdraw() + draw_label("       Menzerath's Law", fontfamily = "Avenir Next", fontface = "bold", color = "#D55E00"),
ggdraw() + draw_label("       Zipf's Rank-Freq. Law", fontfamily = "Avenir Next", fontface = "bold", color = "#009E73"),
nrow = 1
)
#combine elements
main_plot <- plot_grid(top_row_w_title, bottom_row_w_title, ncol = 1)
final_plot <- plot_grid(main_plot, column_titles, ncol = 1, rel_heights = c(1, 0.04))
#get finch image
finch <- get_phylopic(uuid = "7bf8ca33-0fef-4985-a4d4-a147bff6e98c")
#save plot
png("plots/distributions.png", width = 8, height = 5.4, units = "in", res = 1200)
plot(1)
final_plot
add_phylopic_base(finch, fill = "#0072B2", height = 0.08, x = 1.44, y = 1.585)
dev.off()
#load libraries and data
library(ggnetwork)
library(network)
library(cowplot)
library(ggplot2)
library(ggpattern)
#extrafont::loadfonts(quiet = TRUE)
load("analysis/data_and_output/05_posterior_processing/posterior_simulations.RData")
#set working directory, load data, source code
setwd("/Users/masonyoungblood/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
#load libraries and data
library(ggnetwork)
library(network)
library(cowplot)
library(ggplot2)
library(ggpattern)
#extrafont::loadfonts(quiet = TRUE)
load("analysis/data_and_output/05_posterior_processing/posterior_simulations.RData")
load("analysis/data_and_output/03_best_params/priors_and_simulations.RData")
load("climbing_times/best_climbing_times.RData"); data <- best_climbing_times; rm(best_climbing_times)
grid <- read.csv("grid.csv")/1000
#simplify posterior simulations to remove actual innovation and learning
posterior_simulations <- lapply(1:length(posterior_simulations), function(x){posterior_simulations[[x]][[1]]})
#get all routes from all posterior simulations
all_routes <- parallel::mclapply(1:length(posterior_simulations), function(x){
sapply(1:length(posterior_simulations[[x]]$beta), function(y){
paste0(which(posterior_simulations[[x]]$beta[[y]]), collapse = " ")
})
}, mc.cores = 7)
all_routes <- as.data.frame(sort(table(unlist(all_routes)), decreasing = TRUE))
#construct frequency table for histogram
freq_table <- all_routes
freq_table[, 1] <- sapply(1:nrow(freq_table), function(x){length(strsplit(as.character(freq_table$Var1[x]), " ")[[1]])})
freq_table <- aggregate(Freq ~ Var1, freq_table, FUN = sum)
freq_table[, 1] <- 20 - freq_table[, 1]
colnames(freq_table) <- c("skipped", "freq")
#add skipped holds from 2019 to histogram data
skipped_2019 <- data.frame(table(skipped_2019))
colnames(skipped_2019) <- c("skipped", "freq")
freq_table$freq_2019 <- NA
freq_table$freq_2019[match(skipped_2019$skipped, freq_table$skipped)] <- skipped_2019$freq
#load libraries and data
library(ggnetwork)
library(network)
library(cowplot)
library(ggplot2)
library(ggpattern)
#extrafont::loadfonts(quiet = TRUE)
load("analysis/data_and_output/05_posterior_processing/posterior_simulations.RData")
load("analysis/data_and_output/03_best_params/priors_and_simulations.RData")
load("climbing_times/best_climbing_times.RData"); data <- best_climbing_times; rm(best_climbing_times)
grid <- read.csv("grid.csv")/1000
#get true number of holds skipped in 2019
skipped_2019 <- cbind(year = 2019, read.csv("climbing_times/ifsc_world_championship/jpn_2019.csv"))
skipped_2019 <- skipped_2019[-which(is.na(rowMeans(skipped_2019[, grep("hold", colnames(skipped_2019))]))), ]
skipped_2019 <- as.numeric(20-rowSums(skipped_2019[, grep("hold", colnames(skipped_2019))]))
#simplify posterior simulations to remove actual innovation and learning
posterior_simulations <- lapply(1:length(posterior_simulations), function(x){posterior_simulations[[x]][[1]]})
#get all routes from all posterior simulations
all_routes <- parallel::mclapply(1:length(posterior_simulations), function(x){
sapply(1:length(posterior_simulations[[x]]$beta), function(y){
paste0(which(posterior_simulations[[x]]$beta[[y]]), collapse = " ")
})
}, mc.cores = 7)
all_routes <- as.data.frame(sort(table(unlist(all_routes)), decreasing = TRUE))
#construct frequency table for histogram
freq_table <- all_routes
freq_table[, 1] <- sapply(1:nrow(freq_table), function(x){length(strsplit(as.character(freq_table$Var1[x]), " ")[[1]])})
freq_table <- aggregate(Freq ~ Var1, freq_table, FUN = sum)
freq_table[, 1] <- 20 - freq_table[, 1]
colnames(freq_table) <- c("skipped", "freq")
#add skipped holds from 2019 to histogram data
skipped_2019 <- data.frame(table(skipped_2019))
colnames(skipped_2019) <- c("skipped", "freq")
freq_table$freq_2019 <- NA
freq_table$freq_2019[match(skipped_2019$skipped, freq_table$skipped)] <- skipped_2019$freq
#compress them into an aggregated data frame
all_routes <- do.call(rbind, lapply(1:nrow(all_routes), function(x){
temp <- c(as.numeric(strsplit(as.character(all_routes[x, 1]), " ")[[1]]), 21)
data.frame(from = temp[1:(length(temp)-1)], to = temp[2:length(temp)], weight = all_routes[x, 2])
}))
all_routes <- aggregate(weight ~ from + to, all_routes, FUN = sum)
all_routes
#get the frequency at which each hold is use and which hold is skipped
#skipped <- sapply(1:21, function(x){
#  temp <- all_routes$weight[which(all_routes$from == x - 1 & all_routes$to == x + 1)]
#  if(length(temp) == 0){temp <- 0}
#  return(temp)
#})
used <- unlist(parallel::mclapply(1:length(posterior_simulations), function(x){unlist(lapply(1:length(posterior_simulations[[x]]$beta), function(y){which(posterior_simulations[[x]]$beta[[y]])}))}, mc.cores = parallel::detectCores()-1))
used <- as.numeric(table(used))
used <- c(used, max(used))
used
#get the frequency at which each hold is use and which hold is skipped
#skipped <- sapply(1:21, function(x){
#  temp <- all_routes$weight[which(all_routes$from == x - 1 & all_routes$to == x + 1)]
#  if(length(temp) == 0){temp <- 0}
#  return(temp)
#})
used <- unlist(parallel::mclapply(1:length(posterior_simulations), function(x){unlist(lapply(1:length(posterior_simulations[[x]]$beta), function(y){which(posterior_simulations[[x]]$beta[[y]])}))}, mc.cores = parallel::detectCores()-1))
used
table(used)
used <- unlist(parallel::mclapply(1:length(posterior_simulations), function(x){unlist(lapply(1:length(posterior_simulations[[x]]$beta), function(y){which(posterior_simulations[[x]]$beta[[y]])}))}, mc.cores = parallel::detectCores()-1))
used <- as.numeric(table(used))
used <- c(used, max(used))
#construct network for plotting and add attributes
net <- network(all_routes, directed = FALSE)
net
used
length(used)
#construct network for plotting and add attributes
net <- network(all_routes, directed = FALSE)
set.vertex.attribute(net, "shape", c(rep(19, 20), 17))
#set.vertex.attribute(net, attrname = "size", value = skipped)
set.vertex.attribute(net, attrname = "size", value = used/max(used))
net <- ggnetwork(net, layout = as.matrix(grid))
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linewidth = weight), curvature = -0.02) +
geom_nodes(aes(size = size), color = "blue") +
#scale_size(trans = "log", range = c(0, 4), guide = NULL) +
scale_size(range = c(0, 3), guide = NULL) +
scale_linewidth(range = c(0, 1.2), guide = NULL) +
xlim(-0.05, 1.05) +
theme_void() +
scale_y_continuous(breaks = sort(unique(net$y))[-21], labels = c(1:20), expand = c(0, 0), limits = c(-0.05, 1.05))
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linewidth = weight), curvature = -0.02) +
geom_nodes(aes(size = size), color = "blue") +
#scale_size(trans = "log", range = c(0, 4), guide = NULL) +
scale_size(range = c(0, 3), guide = NULL) +
scale_linewidth(range = c(0, 1.2), guide = NULL) +
xlim(-0.05, 1.05) +
theme_void() +
scale_y_continuous(breaks = sort(unique(net$y))[-21], labels = c(1:20), expand = c(0, 0), limits = c(-0.05, 1.05))
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linewidth = weight), curvature = -0.02) +
geom_nodes(aes(size = size), color = "blue") +
#scale_size(trans = "log", range = c(0, 4), guide = NULL) +
scale_size(range = c(0, 3), guide = NULL) +
scale_linewidth(range = c(0, 3), guide = NULL) +
xlim(-0.05, 1.05) +
theme_void() +
scale_y_continuous(breaks = sort(unique(net$y))[-21], labels = c(1:20), expand = c(0, 0), limits = c(-0.05, 1.05))
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linewidth = weight), curvature = -0.02) +
geom_nodes(aes(size = size), color = "blue") +
#scale_size(trans = "log", range = c(0, 4), guide = NULL) +
scale_size(range = c(0, 3), guide = NULL) +
scale_linewidth(range = c(0, 1.2), guide = NULL) +
xlim(-0.05, 1.05) +
theme_void() +
scale_y_continuous(breaks = sort(unique(net$y))[-21], labels = c(1:20), expand = c(0, 0), limits = c(-0.05, 1.05))
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linewidth = weight), curvature = -0.02) +
geom_nodes(aes(size = size), color = "blue") +
#scale_size(trans = "log", range = c(0, 4), guide = NULL) +
scale_size(range = c(0, 3), guide = NULL) +
scale_linewidth(range = c(0, 1.2), guide = NULL) +
xlim(-0.05, 1.05) +
theme_void() +
scale_y_continuous(breaks = sort(unique(net$y))[-21], labels = c(1:20), expand = c(0, 0), limits = c(-0.05, 1.05))
all_routes$weight
all_routes$weight <- all_routes$weight/sum(all_routes$weight)
all_routes
#construct network for plotting and add attributes
net <- network(all_routes, directed = FALSE)
set.vertex.attribute(net, "shape", c(rep(19, 20), 17))
#set.vertex.attribute(net, attrname = "size", value = skipped)
set.vertex.attribute(net, attrname = "size", value = used/max(used))
net <- ggnetwork(net, layout = as.matrix(grid))
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linewidth = weight), curvature = -0.02) +
geom_nodes(aes(size = size), color = "blue") +
#scale_size(trans = "log", range = c(0, 4), guide = NULL) +
scale_size(range = c(0, 3), guide = NULL) +
scale_linewidth(range = c(0, 1.2), guide = NULL) +
xlim(-0.05, 1.05) +
theme_void() +
scale_y_continuous(breaks = sort(unique(net$y))[-21], labels = c(1:20), expand = c(0, 0), limits = c(-0.05, 1.05))
posterior_simulations[[1]]
posterior_simulations[[1]]$beta
posterior_simulations[[1]]$beta[[1]]
which(posterior_simulations[[1]]$beta[[1]])
#get the frequency at which each hold is use and which hold is skipped
#skipped <- sapply(1:21, function(x){
#  temp <- all_routes$weight[which(all_routes$from == x - 1 & all_routes$to == x + 1)]
#  if(length(temp) == 0){temp <- 0}
#  return(temp)
#})
used <- unlist(parallel::mclapply(1:length(posterior_simulations), function(x){unlist(lapply(1:length(posterior_simulations[[x]]$beta), function(y){which(posterior_simulations[[x]]$beta[[y]])}))}, mc.cores = parallel::detectCores()-1))
used <- as.numeric(table(used))
used
length(posterior_simulations)
length(posterior_simulations[[1]])
length(posterior_simulations[[1]]$beta)
length(posterior_simulations[[2]]$beta)
length(posterior_simulations[[3]]$beta)
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linewidth = weight), curvature = -0.02) +
geom_nodes(aes(size = size), color = "blue") +
#scale_size(trans = "log", range = c(0, 4), guide = NULL) +
scale_size(range = c(0, 3), guide = NULL) +
scale_linewidth(range = c(0, 3), guide = NULL) +
xlim(-0.05, 1.05) +
theme_void() +
scale_y_continuous(breaks = sort(unique(net$y))[-21], labels = c(1:20), expand = c(0, 0), limits = c(-0.05, 1.05))
get all routes from all posterior simulations
#get all routes from all posterior simulations
all_routes <- parallel::mclapply(1:length(posterior_simulations), function(x){
sapply(1:length(posterior_simulations[[x]]$beta), function(y){
paste0(which(posterior_simulations[[x]]$beta[[y]]), collapse = " ")
})
}, mc.cores = 7)
all_routes
all_routes <- as.data.frame(sort(table(unlist(all_routes)), decreasing = TRUE))
all_routes
all_routes
all_routes[1, ]
all_routes[1, 2]
all_routes[1, 1]
all_routes[2, 1]
strsplit(as.character(all_routes[x, 1]), " ")[[1]]
strsplit(as.character(all_routes[1, 1]), " ")[[1]]
strsplit(as.character(all_routes[10, 1]), " ")[[1]]
as.numeric(strsplit(as.character(all_routes[10, 1]), " ")[[1]])
#get all routes from all posterior simulations
all_routes <- parallel::mclapply(1:length(posterior_simulations), function(x){
sapply(1:length(posterior_simulations[[x]]$beta), function(y){
paste0(which(posterior_simulations[[x]]$beta[[y]]), collapse = " ")
})
}, mc.cores = 7)
all_routes <- as.data.frame(sort(table(unlist(all_routes)), decreasing = TRUE))
#compress them into an aggregated data frame
all_routes <- do.call(rbind, lapply(1:nrow(all_routes), function(x){
temp <- c(as.numeric(strsplit(as.character(all_routes[x, 1]), " ")[[1]]), 21)
data.frame(from = temp[1:(length(temp)-1)], to = temp[2:length(temp)], weight = all_routes[x, 2])
}))
all_routes <- aggregate(weight ~ from + to, all_routes, FUN = sum)
all_routes
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linewidth = weight), curvature = -0.02) +
geom_nodes(aes(size = size), color = "blue") +
#scale_size(trans = "log", range = c(0, 4), guide = NULL) +
scale_size(range = c(0, 3), guide = NULL) +
scale_linewidth(range = c(0, 3), guide = NULL) +
xlim(-0.05, 1.05) +
theme_void() +
scale_y_continuous(breaks = sort(unique(net$y))[-21], labels = c(1:20), expand = c(0, 0), limits = c(-0.05, 1.05))
