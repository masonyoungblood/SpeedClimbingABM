#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
iters <- 1000
#hist(rexp(iters, rate = 50), breaks = 100) #improve_sd
#hist(truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1), breaks = 100) #sd_multiplier
#hist(rbeta(iters, shape1 = 1, shape2 = 2)*0.5, breaks = 100, xlim = c(0, 1)) #innov_prob and learn_prob
#hist(round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), breaks = 100) #n_top
#hist(sample(3, iters, replace = TRUE), breaks = 100) #adj_poss
#hist(truncnorm::rtruncnorm(iters, a = -1, b = 1, mean = 0, sd = 0.5), breaks = 100) #learn_x_times and innov_x_times
priors <- data.frame(improve_sd = rexp(iters, rate = 50), sd_multiplier = truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1),
innov_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5, learn_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5,
n_top = round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), adj_poss = sample(3, iters, replace = TRUE))
start <- Sys.time()
simulations <- bettermc::mclapply(1:iters, function(x){SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[x], n_top = priors$n_top[x],
innov_prob = priors$innov_prob[x], adj_poss = priors$adj_poss[x], improve_sd = priors$improve_sd[x], sd_multiplier = priors$sd_multiplier[x],
sum_stats = TRUE, plot = FALSE)}, mc.cores = 5, mc.retry = 0)
simulations
sapply(1:iters, function(x){ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)})
source("SpeedClimbingABM.R")
library(bettermc)
library(abcrf)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
iters <- 100000
hist(rexp(iters, rate = 50), breaks = 100) #improve_sd
hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
#hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1), breaks = 100) #sd_multiplier
#hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.05), breaks = 100) #sd_multiplier
#hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1), breaks = 100) #sd_multiplier
parallel::detectCores()
source("SpeedClimbingABM.R")
library(bettermc)
library(abcrf)
detectCores()
parallel::detectCores()
source("SpeedClimbingABM.R")
library(bettermc)
library(abcrf)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
iters <- 500000
#hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
#hist(truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1), breaks = 100) #sd_multiplier
#hist(rbeta(iters, shape1 = 1, shape2 = 2)*0.5, breaks = 100, xlim = c(0, 1)) #innov_prob and learn_prob
#hist(round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), breaks = 100) #n_top
#hist(sample(3, iters, replace = TRUE), breaks = 100) #adj_poss
#hist(truncnorm::rtruncnorm(iters, a = -1, b = 1, mean = 0, sd = 0.5), breaks = 100) #learn_x_times and innov_x_times
priors <- data.frame(improve_sd = rexp(iters, rate = 40), sd_multiplier = truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1),
innov_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5, learn_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5,
n_top = round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), adj_poss = sample(3, iters, replace = TRUE))
simulations <- bettermc::mclapply(1:iters, function(x){SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[x], n_top = priors$n_top[x],
innov_prob = priors$innov_prob[x], adj_poss = priors$adj_poss[x], improve_sd = priors$improve_sd[x], sd_multiplier = priors$sd_multiplier[x],
sum_stats = TRUE, plot = FALSE)}, mc.cores = 7, mc.retry = 5)
test <- list(priors = priors, simulations = simulations)
save(test, file = "~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/test.RData")
source("SpeedClimbingABM.R")
library(bettermc)
library(abcrf)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
iters <- 250000
#hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
#hist(truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1), breaks = 100) #sd_multiplier
#hist(rbeta(iters, shape1 = 1, shape2 = 2)*0.5, breaks = 100, xlim = c(0, 1)) #innov_prob and learn_prob
#hist(round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), breaks = 100) #n_top
#hist(sample(3, iters, replace = TRUE), breaks = 100) #adj_poss
#hist(truncnorm::rtruncnorm(iters, a = -1, b = 1, mean = 0, sd = 0.5), breaks = 100) #learn_x_times and innov_x_times
priors <- data.frame(improve_sd = rexp(iters, rate = 40), sd_multiplier = truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1),
innov_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5, learn_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5,
n_top = round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), adj_poss = sample(3, iters, replace = TRUE))
simulations <- bettermc::mclapply(1:iters, function(x){SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[x], n_top = priors$n_top[x],
innov_prob = priors$innov_prob[x], adj_poss = priors$adj_poss[x], improve_sd = priors$improve_sd[x], sd_multiplier = priors$sd_multiplier[x],
sum_stats = TRUE, plot = FALSE)}, mc.cores = 7, mc.retry = 5)
test <- list(priors = priors, simulations = simulations)
save(test, file = "~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/test.RData")
simulations
?bettermc::mclapply
source("SpeedClimbingABM.R")
library(bettermc)
library(abcrf)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
iters <- 200000
#hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
#hist(truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1), breaks = 100) #sd_multiplier
#hist(rbeta(iters, shape1 = 1, shape2 = 2)*0.5, breaks = 100, xlim = c(0, 1)) #innov_prob and learn_prob
#hist(round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), breaks = 100) #n_top
#hist(sample(3, iters, replace = TRUE), breaks = 100) #adj_poss
#hist(truncnorm::rtruncnorm(iters, a = -1, b = 1, mean = 0, sd = 0.5), breaks = 100) #learn_x_times and innov_x_times
priors <- data.frame(improve_sd = rexp(iters, rate = 40), sd_multiplier = truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1),
innov_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5, learn_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5,
n_top = round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), adj_poss = sample(3, iters, replace = TRUE))
simulations <- bettermc::mclapply(1:iters, function(x){SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[x], n_top = priors$n_top[x],
innov_prob = priors$innov_prob[x], adj_poss = priors$adj_poss[x], improve_sd = priors$improve_sd[x], sd_multiplier = priors$sd_multiplier[x],
sum_stats = TRUE, plot = FALSE)}, mc.cores = 6, mc.retry = 5, mc.allow.error = TRUE, mc.allow.fatal = TRUE)
test <- list(priors = priors, simulations = simulations)
save(test, file = "~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/test.RData")
simulations
ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)})
ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)
ifelse(is.numeric(nrow(simulations[[1]])), TRUE, FALSE)
sapply(1:iters, function(x){ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)})
table(sapply(1:iters, function(x){ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)}))
which(is.false(sapply(1:iters, function(x){ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)}))
)
which(sapply(1:iters, function(x){ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)}) == FALSE)
to_retrieve
#which still didn't get collected
to_retrieve <- which(sapply(1:iters, function(x){ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)}) == FALSE)
to_retrieve
i <- to_retrieve[1]
i
priors$innov_prob[i]
temp <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[i], n_top = priors$n_top[i],
innov_prob = priors$innov_prob[i], adj_poss = priors$adj_poss[i], improve_sd = priors$improve_sd[i], sd_multiplier = priors$sd_multiplier[i],
sum_stats = TRUE, plot = FALSE)
temp <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[i], n_top = priors$n_top[i],
innov_prob = priors$innov_prob[i], adj_poss = priors$adj_poss[i], improve_sd = priors$improve_sd[i], sd_multiplier = priors$sd_multiplier[i],
sum_stats = TRUE, plot = FALSE)
priors[i, ]
temp <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[i], n_top = priors$n_top[i],
innov_prob = priors$innov_prob[i], adj_poss = priors$adj_poss[i], improve_sd = priors$improve_sd[i], sd_multiplier = priors$sd_multiplier[i],
sum_stats = TRUE, plot = FALSE)
temp <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[i], n_top = priors$n_top[i],
innov_prob = priors$innov_prob[i], adj_poss = priors$adj_poss[i], improve_sd = priors$improve_sd[i], sd_multiplier = priors$sd_multiplier[i],
sum_stats = TRUE, plot = FALSE)
temp <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[i], n_top = priors$n_top[i],
innov_prob = priors$innov_prob[i], adj_poss = priors$adj_poss[i], improve_sd = priors$improve_sd[i], sd_multiplier = priors$sd_multiplier[i],
sum_stats = TRUE, plot = FALSE)
priors[to_retrieve, ]
hist(priors$improve_sd, breaks = 100)
priors$improve_sd[to_retrieve]
priors$improve_sd[to_retrieve] <- 0.02
temp <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[i], n_top = priors$n_top[i],
innov_prob = priors$innov_prob[i], adj_poss = priors$adj_poss[i], improve_sd = priors$improve_sd[i], sd_multiplier = priors$sd_multiplier[i],
sum_stats = TRUE, plot = FALSE)
temp
for(i in to_retrieve){
temp <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[i], n_top = priors$n_top[i],
innov_prob = priors$innov_prob[i], adj_poss = priors$adj_poss[i], improve_sd = priors$improve_sd[i], sd_multiplier = priors$sd_multiplier[i],
sum_stats = TRUE, plot = FALSE)
simulations[[i]] <- temp
rm(temp)
}
which(sapply(1:iters, function(x){ifelse(is.numeric(nrow(simulations[[x]])), TRUE, FALSE)}) == FALSE)
test <- list(priors = priors, simulations = simulations)
save(test, file = "~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/test.RData")
obs_stats <- as.data.frame(t(quantile(data[which(data$year == 2019), ]$time)))
sum_stats <- do.call(rbind, lapply(1:length(simulations), function(x){as.numeric(simulations[[x]][13,])}))
#set sample size for random forest (80% of data)
sample_size <- 0.8*nrow(sum_stats)
#construct object to hold predictions
abc_rf_predictions <- list()
#set number of cores
ncores <- detectCores() - 1
#set value of i
i <- 3
library(parallel)
#set number of cores
ncores <- detectCores() - 1
#set random seed
set.seed(i)
#construct data frame for random forest abc
abcrf_data <- data.frame(c(priors[, i]), sum_stats = sum_stats)
colnames(abcrf_data)[1] <- "param"
colnames(obs_stats) <- colnames(abcrf_data)[-1]
#run random forest with recommended values
reg_abcrf <- regAbcrf(formula = param ~ ., data = abcrf_data, ntree = 1000, sampsize = sample_size, paral = TRUE, ncores = ncores)
densityPlot(object = reg_abcrf, obs = obs_stats, training = abcrf_data, paral = TRUE, ncores = ncores)
#set value of i
i <- 4
#run loop (between comments below) manually
# -------------------------------------------------------------------------
#set random seed
set.seed(i)
#construct data frame for random forest abc
abcrf_data <- data.frame(c(priors[, i]), sum_stats = sum_stats)
colnames(abcrf_data)[1] <- "param"
colnames(obs_stats) <- colnames(abcrf_data)[-1]
#run random forest with recommended values
reg_abcrf <- regAbcrf(formula = param ~ ., data = abcrf_data, ntree = 500, sampsize = sample_size, paral = TRUE, ncores = ncores)
densityPlot(object = reg_abcrf, obs = obs_stats, training = abcrf_data, paral = TRUE, ncores = ncores)
#run model
output <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 3, improve = 0.96, sd_multiplier = 0.5,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
knitr::include_graphics("https://helios-i.mashable.com/imagery/articles/03XKxYMwkNiZJGiHUu2FWnw/hero-image.fill.size_1248x702.v1628089817.png")
#function for calculating beta parameters
est_beta_params <- function(mean, var){
#calculate alpha from mean and var
alpha <- (((1-mean)/var)-(1/mean))*(mean^2)
#calculate beta from alpha and mean
beta <- alpha*((1/mean)-1)
#return alpha and beta
return(params = list(alpha = alpha, beta = beta))
}
#generate range
range <- seq(0.01, 0.99, length.out = 1000)
#calculate parameters of beta dist
mean <- 0.99
var <- 0.001
beta_params <- est_beta_params(mean, var)
#construct and normalize dist
dist <- dbeta(range, beta_params$alpha, beta_params$beta)
dist <- (length(range)*dist)/sum(dist)
#plot it
par(mar = c(4, 4, 1, 1))
plot(range, dist, type = "l", xlab = "P", ylab = "Density")
#set seed
set.seed(12345)
#set improve value
improve <- 0.98
#begin plot
par(mar = c(4, 4, 1, 1))
plot(range, dist, type = "l", xlab = "P", ylab = "Density")
#iterate
for(i in 1:20){
#draw random point sample from exp distribution
point_sample <- sample(range, 1, prob = dist)*improve
#create new dist with point sample as the mean
beta_params <- est_beta_params(point_sample, var*(point_sample^2))
dist <- dbeta(range, beta_params$alpha, beta_params$beta)
#normalize it
dist <- (length(range)*dist)/sum(dist)
#plot new line
lines(range, dist, type = "l", col = i+1)
#remove temporary objects
rm(list = c("point_sample", "beta_params"))
}
#set seed
set.seed(12345)
#set improve value
improve <- 0.94
#calculate beta params
beta_params <- est_beta_params(mean, var)
#construct and normalize dist
dist <- dbeta(range, beta_params$alpha, beta_params$beta)
dist <- (length(range)*dist)/sum(dist)
#begin plot
par(mar = c(4, 4, 1, 1))
plot(range, dist, type = "l", xlab = "P", ylab = "Density")
#iterate
for(i in 1:20){
#draw random point sample from exp distribution
point_sample <- sample(range, 1, prob = dist)*improve
#create new dist with point sample as the mean
beta_params <- est_beta_params(point_sample, var*(point_sample^2))
dist <- dbeta(range, beta_params$alpha, beta_params$beta)
#normalize it
dist <- (length(range)*dist)/sum(dist)
#plot new line
lines(range, dist, type = "l", col = i+1)
#remove temporary objects
rm(list = c("point_sample", "beta_params"))
}
knitr::include_graphics("https://www.kindpng.com/picc/m/592-5929143_speed-climbing-wall-sketch-speed-climbing-route-map.png")
#set number of holds
n_holds <- 20
#set initial mean speed
init_time <- 18
#set probability of initial beta holds at 1 (all holds on the route)
beta_true_prob <- 1
#set parameter controlling the SD of sequence ratios
sd_multiplier <- 0.5
#initialize starting beta
beta <- sample(c(TRUE, FALSE), n_holds, prob = c(beta_true_prob, 1-beta_true_prob), replace = TRUE)
#initialize sequence ratios
seq_ratios <- truncnorm::rtruncnorm(n_holds, a = 0, mean = 1, sd = sd_multiplier)
#print the beta and climbing time vectors
beta
(init_time/n_holds)*seq_ratios
#get cumulative climbing times
cum_num <- cumsum(c(0, (init_time/n_holds)*seq_ratios))
#restructure and plot
to_plot <- data.frame(x = unlist(sapply(1:(length(cum_num)-1), function(x){seq(cum_num[x], cum_num[x+1], by = 0.01)})),
y = unlist(sapply(1:(length(cum_num)-1), function(x){rep(x, length(seq(cum_num[x], cum_num[x+1], by = 0.01)))})))
par(mar = c(4, 4, 1, 1))
plot(to_plot$x, to_plot$y, type = "l", xlab = "Time (s)", ylab = "Hold #")
source("SpeedClimbingABM.R")
load("data.RData")
data <- data[which(data$gender == "W"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
#store starting time
start <- Sys.time()
#run model
output <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = 0.2, n_top = 20,
innov_prob = 0.2, adj_poss = 3, improve = 0.96, sd_multiplier = 0.5,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
#print run time
Sys.time() - start
output <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = 0, n_top = 20,
innov_prob = 0, adj_poss = 2, improve = 0.96, sd_multiplier = 0.5,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
output <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = 0, n_top = 20,
innov_prob = 0, adj_poss = 2, improve = 0.92, sd_multiplier = 0.5,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
output <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = 0, n_top = 20,
innov_prob = 0, adj_poss = 2, improve = 0.8, sd_multiplier = 0.5,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
output <- SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = 0, n_top = 20,
innov_prob = 0, adj_poss = 2, improve = 0.85, sd_multiplier = 0.5,
sum_stats = TRUE, plot = TRUE, bw = 0.6, ylim = 0.4)
hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
iters <- 200000
hist(rexp(iters, rate = 40), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.1), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.05), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.05), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.05), breaks = 100) #improve_sd
hist(rbeta(iters, shape1 = 1, shape2 = 4), breaks = 100) #improve_sd
hist(rbeta(iters, shape1 = 4, shape2 = 1), breaks = 100) #improve_sd
hist(rbeta(iters, shape1 = 6, shape2 = 1), breaks = 100) #improve_sd
hist(rbeta(iters, shape1 = 6, shape2 = 0.5), breaks = 100) #improve_sd
hist(rbeta(iters, shape1 = 8, shape2 = 1), breaks = 100) #improve_sd
hist(rbeta(iters, shape1 = 12, shape2 = 1), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.05), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.1), breaks = 100) #improve_sd
hist(truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.1), breaks = 100) #improve_sd
source("SpeedClimbingABM.R")
library(bettermc)
library(parallel)
library(abcrf)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
iters <- 200000
load("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/test.RData")
obs_stats <- as.data.frame(t(quantile(data[which(data$year == 2019), ]$time)))
sum_stats <- do.call(rbind, lapply(1:length(simulations), function(x){as.numeric(simulations[[x]][13,])}))
#set sample size for random forest (80% of data)
sample_size <- 0.8*nrow(sum_stats)
#construct object to hold predictions
abc_rf_predictions <- list()
#set number of cores
ncores <- detectCores() - 1
obs_stats <- as.data.frame(t(quantile(data[which(data$year == 2019), ]$time)))
sum_stats <- do.call(rbind, lapply(1:length(test$simulations), function(x){as.numeric(test$simulations[[x]][13,])}))
#set sample size for random forest (80% of data)
sample_size <- 0.8*nrow(sum_stats)
#construct object to hold predictions
abc_rf_predictions <- list()
#set number of cores
ncores <- detectCores() - 1
str(test$priors)
#set value of i
i <- 5
#set random seed
set.seed(i)
#construct data frame for random forest abc
abcrf_data <- data.frame(c(test$priors[, i]), sum_stats = sum_stats)
colnames(abcrf_data)[1] <- "param"
colnames(obs_stats) <- colnames(abcrf_data)[-1]
#run random forest with recommended values
reg_abcrf <- regAbcrf(formula = param ~ ., data = abcrf_data, ntree = 500, sampsize = sample_size, paral = TRUE, ncores = ncores)
densityPlot(object = reg_abcrf, obs = obs_stats, training = abcrf_data, paral = TRUE, ncores = ncores)
#set value of i
i <- 6
#run loop (between comments below) manually
# -------------------------------------------------------------------------
#set random seed
set.seed(i)
#construct data frame for random forest abc
abcrf_data <- data.frame(c(test$priors[, i]), sum_stats = sum_stats)
colnames(abcrf_data)[1] <- "param"
colnames(obs_stats) <- colnames(abcrf_data)[-1]
#run random forest with recommended values
reg_abcrf <- regAbcrf(formula = param ~ ., data = abcrf_data, ntree = 500, sampsize = sample_size, paral = TRUE, ncores = ncores)
densityPlot(object = reg_abcrf, obs = obs_stats, training = abcrf_data, paral = TRUE, ncores = ncores)
test$priors$sd_multiplier
density(data$time)
plot(density(data$time))
data$year == 2019
which(data$year == 2019)
plot(density(data$time[which(data$year == 2019)]))
?quantile
quantile(data$time[which(data$year == 2019)])
quantile(data$time[which(data$year == 2019)], probs = seq(0, 1, 0.1))
n
source("SpeedClimbingABM.R")
library(bettermc)
library(parallel)
library(abcrf)
load("data.RData")
data <- data[which(data$gender == "M"), ]
#get years
years <- sort(unique(data$year))
#population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#leave probabilities
leave_prob <- unlist(lapply(1:(length(years)-1), function(x){
temp_a <- data[which(data$year == years[x]), ]
temp_b <- data[which(data$year == years[x+1]), ]
length(which(!(temp_a$athlete %in% temp_b$athlete)))/nrow(temp_a)
}))
#initial climbing times
init_times <- data[which(data$year == years[1]), ]$time
iters <- 100000
#hist(truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.1), breaks = 100) #improve
#hist(truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1), breaks = 100) #sd_multiplier
#hist(rbeta(iters, shape1 = 1, shape2 = 2)*0.5, breaks = 100, xlim = c(0, 1)) #innov_prob and learn_prob
#hist(round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), breaks = 100) #n_top
#hist(sample(2, iters, replace = TRUE), breaks = 100) #adj_poss
#hist(truncnorm::rtruncnorm(iters, a = -1, b = 1, mean = 0, sd = 0.5), breaks = 100) #learn_x_times and innov_x_times
priors <- data.frame(improve = truncnorm::rtruncnorm(iters, a = 0, b = 1, mean = 1, sd = 0.1),
sd_multiplier = truncnorm::rtruncnorm(iters, a = 0, mean = 0.4, sd = 0.1),
innov_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5, learn_prob = rbeta(iters, shape1 = 1, shape2 = 2)*0.5,
n_top = round(rbeta(iters, shape1 = 1, shape2 = 4)*min(n-1)+1), adj_poss = sample(2, iters, replace = TRUE))
simulations <- bettermc::mclapply(1:iters, function(x){SpeedClimbingABM(n = n, leave_prob = leave_prob, init_times = init_times,
n_holds = 20, beta_true_prob = 1, learn_prob = priors$learn_prob[x], n_top = priors$n_top[x],
innov_prob = priors$innov_prob[x], adj_poss = priors$adj_poss[x], improve = priors$improve[x], sd_multiplier = priors$sd_multiplier[x],
sum_stats = TRUE, plot = FALSE)}, mc.cores = 6, mc.retry = 5, mc.allow.error = TRUE, mc.allow.fatal = TRUE)
test <- list(priors = priors, simulations = simulations)
save(test, file = "~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/test.RData")
library(EasyABC)
library(EasyABC)
?ABC_mcmc()
