if(learn_bool){learn_prob_ind <- sapply(1:nrow(climbers), function(x){inv_logit(logit(learn_prob) + learn_x_times*t_scale[x] + learn_x_pop*n_scale[i])})}
if(innov_bool){innov_prob_ind <- sapply(1:nrow(climbers), function(x){inv_logit(logit(innov_prob) + innov_x_times*t_scale[x] + innov_x_pop*n_scale[i])})}
#get who will learn
if(learn_bool){to_learn <- sapply(1:nrow(climbers), function(x){sample(c(TRUE, FALSE), 1, prob = c(learn_prob_ind[x], 1-learn_prob_ind[x]))})}
if(!learn_bool){to_learn <- sample(c(TRUE, FALSE), nrow(climbers), prob = c(learn_prob, 1-learn_prob), replace = TRUE)}
#for each climber who is sampled
for(k in c(1:nrow(climbers))[which(to_learn)]){
#find out which top climbers have different beta than climber k
diff_top_climbers <- top_climbers[which(sapply(top_climbers, function(x){!identical(climbers$beta[[k]], climbers$beta[[top_climbers[x]]])}))]
#if there are top climbers with different beta
if(length(diff_top_climbers) > 0){
#get possible new times for climber k assuming the beta and seq_ratios of the top climbers with different beta
poss_new_times <- sapply(diff_top_climbers, function(x){sum((climbers$ref_times[x]*climbers$seq_ratios[[x]]*climbers$ath_imp[[x]][i])[climbers$beta[[x]]])})
#if the lowest possible new time is better than the current record, then replace the beta and seq_ratio of climber k with beta from best beta from top climbers
if(min(poss_new_times) < climbers$current_record[k]){
climbers$beta[[k]] <- climbers$beta[[diff_top_climbers[which.min(poss_new_times)]]]
climbers$seq_ratios[[k]] <- climbers$seq_ratios[[diff_top_climbers[which.min(poss_new_times)]]]
}
rm(list = c("poss_new_times"))
}
rm(list = c("diff_top_climbers"))
}
#get who will innovate
if(innov_bool){to_flip <- which(sapply(1:nrow(climbers), function(x){sample(c(TRUE, FALSE), 1, prob = c(innov_prob_ind[x], 1-innov_prob_ind[x]))}))}
if(!innov_bool){to_flip <- which(sample(c(TRUE, FALSE), nrow(climbers), prob = c(innov_prob, 1-innov_prob), replace = TRUE))}
to_flip
j <- 28
#store original beta
beta_a <- climbers$beta[[j]]
seq_ratios_a <- climbers$seq_ratios[[j]]
#store holds used (skipping first hold since it cannot be flipped)
ok_holds <- which(beta_a)[-1]
ok_holds
#get euclidean distances between adjacent holds for each option
euc_dists <- sapply(1:length(ok_holds), function(x){
#store adjacent distances (with added TRUEs for first hold and final buzzer)
adj_dists <- c(1, ok_holds, n_holds+1)-ok_holds[x]
#get used hold below and above
lower_adj <- c(1, ok_holds, n_holds+1)[which.min(abs(adj_dists[which(adj_dists < 0)]))]
upper_adj <- c(1, ok_holds, n_holds+1)[which(adj_dists > 0)[which.min(adj_dists[which(adj_dists > 0)])]]
#return euclidean distance between them
return(sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2))
})
#only include holds less than maximum distance
ok_holds <- ok_holds[which(euc_dists <= max_dist)]
#store length for boolean statements
ok_length <- length(ok_holds)
ok_length
ok_holds
#subset distances for weighted sampling
euc_dists <- euc_dists[which(euc_dists <= max_dist)]
euc_dists
x <- 1
#store adjacent distances (with added TRUEs for first hold and final buzzer)
adj_dists <- c(1, ok_holds, n_holds+1)-ok_holds[x]
adj_ditss
adj_dists
#get used hold below and above
lower_adj <- c(1, ok_holds, n_holds+1)[which.min(abs(adj_dists[which(adj_dists < 0)]))]
upper_adj <- c(1, ok_holds, n_holds+1)[which(adj_dists > 0)[which.min(adj_dists[which(adj_dists > 0)])]]
lower_adj
upper_adj
ok_holds
sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)
sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)
sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)
ok_holds[x]
sqrt((grid$x[ok_holds[x]]-grid$x[lower_adj])^2+(grid$y[ok_holds[x]]-grid$y[lower_adj])^2)
sqrt((grid$x[ok_holds[x]]-grid$x[lower_adj])^2+(grid$y[ok_holds[x]]-grid$y[lower_adj])^2)
sqrt((grid$x[upper_adj]-grid$x[ok_holds[x]])^2+(grid$y[upper_adj]-grid$y[ok_holds[x]])^2)
sqrt((grid$x[upper_adj]-grid$x[ok_holds[x]])^2+(grid$y[upper_adj]-grid$y[ok_holds[x]])^2)
sqrt((grid$x[upper_adj]-grid$x[ok_holds[x]])^2+(grid$y[upper_adj]-grid$y[ok_holds[x]])^2)
sqrt((grid$x[ok_holds[x]]-grid$x[lower_adj])^2+(grid$y[ok_holds[x]]-grid$y[lower_adj])^2) +
sqrt((grid$x[upper_adj]-grid$x[ok_holds[x]])^2+(grid$y[upper_adj]-grid$y[ok_holds[x]])^2)
sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)
sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)
#return euclidean distances of original and new paths
orig_dist <- sqrt((grid$x[ok_holds[x]]-grid$x[lower_adj])^2+(grid$y[ok_holds[x]]-grid$y[lower_adj])^2) +
sqrt((grid$x[upper_adj]-grid$x[ok_holds[x]])^2+(grid$y[upper_adj]-grid$y[ok_holds[x]])^2)
new_dist <- sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)
new_dist
orig_dist/new_dist
orig_dist/new_dist
orig_dist/new_dist
orig_dist/new_dist
c(new_dist, orig_dist/new_dist)
c(new_dist, orig_dist/new_dist)
#get euclidean distances between adjacent holds for each option, as well as ratios between original and new path distances
euc_dists <- sapply(1:length(ok_holds), function(x){
#store adjacent distances (with added TRUEs for first hold and final buzzer)
adj_dists <- c(1, ok_holds, n_holds+1)-ok_holds[x]
#get used hold below and above
lower_adj <- c(1, ok_holds, n_holds+1)[which.min(abs(adj_dists[which(adj_dists < 0)]))]
upper_adj <- c(1, ok_holds, n_holds+1)[which(adj_dists > 0)[which.min(adj_dists[which(adj_dists > 0)])]]
#return euclidean distances of original and new paths
orig_dist <- sqrt((grid$x[ok_holds[x]]-grid$x[lower_adj])^2+(grid$y[ok_holds[x]]-grid$y[lower_adj])^2) +
sqrt((grid$x[upper_adj]-grid$x[ok_holds[x]])^2+(grid$y[upper_adj]-grid$y[ok_holds[x]])^2)
new_dist <- sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)
#return euclidean distance and ratio
return(c(new_dist, orig_dist/new_dist))
})
euc_dists
#get euclidean distances between adjacent holds for each option, as well as ratios between original and new path distances
euc_dists <- t(sapply(1:length(ok_holds), function(x){
#store adjacent distances (with added TRUEs for first hold and final buzzer)
adj_dists <- c(1, ok_holds, n_holds+1)-ok_holds[x]
#get used hold below and above
lower_adj <- c(1, ok_holds, n_holds+1)[which.min(abs(adj_dists[which(adj_dists < 0)]))]
upper_adj <- c(1, ok_holds, n_holds+1)[which(adj_dists > 0)[which.min(adj_dists[which(adj_dists > 0)])]]
#return euclidean distances of original and new paths
orig_dist <- sqrt((grid$x[ok_holds[x]]-grid$x[lower_adj])^2+(grid$y[ok_holds[x]]-grid$y[lower_adj])^2) +
sqrt((grid$x[upper_adj]-grid$x[ok_holds[x]])^2+(grid$y[upper_adj]-grid$y[ok_holds[x]])^2)
new_dist <- sqrt((grid$x[upper_adj]-grid$x[lower_adj])^2+(grid$y[upper_adj]-grid$y[lower_adj])^2)
#return euclidean distance and ratio
return(c(new_dist, orig_dist/new_dist))
}))
euc_dists
1/rank(euc_dists[, 2]
)
1/rank(euc_dists[, 2])
(1/rank(euc_dists[, 1])
)
constraint_a <- 1
constraint_b <- 1
((1/rank(euc_dists[, 1]))^constraint_a)*((1/rank(euc_dists[, 2]))^constraint_b)
((1/rank(euc_dists[, 1]))^constraint_a)*((1/rank(euc_dists[, 2]))^constraint_b)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$innov_prob))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$learn_prob))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$constraint_b))
plot(density(test$constraint_a))
plot(density(test$innov_prob))
plot(density(test$innov_prob))
plot(density(test$learn))
plot(density(test$learn_prob))
plot(density(test$max_dist))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$max_dist))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$n_top))
plot(density(test$improve_rate_m))
plot(density(test$innov_x_times))
plot(density(test$innov_prob))
plot(density(test$innov_x_times))
plot(density(test$innov_x_pop))
plot(density(test$learn_x_pop))
plot(density(test$learn_x_times))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$innov_x_times))
plot(density(test$innov_prob))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$constraint_b))
plot(density(test$constraint_a))
plot(density(test$innov_prob))
plot(density(test$max_dist))
plot(density(test$learn_prob))
plot(density(test$innov_x_times))
plot(density(test$innov_x_pop))
plot(density(test$learn_x_pop))
plot(density(test$learn_x_times))
plot(density(test$innov_x_times))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$innov_prob))
plot(density(test$constraint_b))
plot(density(test$constraint_a))
plot(density(test$innov_x_times))
plot(density(test$innov_x_pop))
plot(density(test$max_dist))
plot(density(test$improve_rate_m))
plot(density(test$improve_rate_sd))
plot(density(test$n_top))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$innov_prob))
plot(density(test$constraint_b))
plot(density(test$constraint_a))
plot(density(test$max_dist))
plot(density(test$n_top))
plot(density(test$learn_prob))
plot(density(test$innov_x_times))
plot(density(test$innov_x_pop))
plot(density(test$learn_x_pop))
plot(density(test$learn_x_times))
plot(density(test$improve_rate_m))
plot(density(test$improve))
plot(density(test$improve_rate_sd))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$innov_prob))
plot(density(test$learn_prob))
plot(density(test$max_dist))
plot(density(test$n_top))
plot(density(test$improve_rate_m))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$innov_prob))
plot(density(test$learn_prob))
plot(density(test$innov_x_times))
plot(density(test$innov_x_pop))
plot(density(test$learn_x_pop))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$constraint_b))
plot(density(test$constraint_a))
plot(density(test$innov_prob))
plot(density(test$learn_prob))
plot(density(test$improve_rate_m))
plot(density(test$innov_x_times))
plot(density(test$innov_x_pop))
plot(density(test$learn_x_times))
plot(density(test$learn_x_pop))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$learn_prob))
plot(density(test$innov_prob))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$constraint_b))
plot(density(test$constraint_a))
plot(density(test$innov_prob))
plot(density(test$learn_prob))
plot(density(test$max_dist))
plot(density(test$max_dist))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$max_dist))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$max_dist))
plot(density(test$innov_prob))
plot(density(test$learn_prob))
plot(density(test$max_dist))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$max_dist))
plot(density(test$innov_prob))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$innov_prob))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$learn_prob))
plot(density(test$max_dist))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$max_dist))
plot(density(test$innov_prob))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$constraint_b))
plot(density(test$constraint_a))
plot(density(test$innov_prob))
plot(density(test$max_dist))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$max_dist))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$max_dist))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$max_dist))
plot(density(test$innov_prob))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$innov_prob))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$max_dist))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$max_dist))
plot(density(test$innov_prob))
plot(density(test$learn_prob))
plot(density(test$innov_x_times))
plot(density(test$constraint_b))
plot(density(test$innov_prob))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$innov_prob))
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$n_top))
plot(density(test$improve_rate_m))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
plot(density(test$constraint_a))
plot(density(test$constraint_b))
plot(density(test$max_d))
plot(density(test$max_dist))
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$improve_min)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$constraint_b)
hist(test$n_top)
hist(test$innov_x_times)
hist(test$learn_x_times)
hist(test$learn_x_pop)
hist(test$innov_x_pop)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$improve_min)
hist(test$improve_rate_m)
hist(test$improve_rate_sd)
hist(test$improve_rate_m)
hist(test$innov_x_times)
hist(test$learn_x_times)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$innov_prob)
hist(test$improve_rate_m)
hist(test$improve_min)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$improve_min)
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$constraint_b)
hist(test$learn_x_year)
hist(test$innov_x_year)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$improve_rate_m)
hist(test$innov_x_times)
hist(test$learn_x_times)
hist(test$innov_x_pop)
hist(test$learn_x_pop)
hist(test$innov_x_year)
hist(test$learn_x_year)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$improve_rate_m)
hist(test$learn_x_pop)
hist(test$learn_x_times)
hist(test$learn_x_year)
hist(test$innov_x_year)
hist(test$innov_x_pop)
hist(test$n_top)
hist(test$improve_rate_sd)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$improve_min)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$improve_min)
hist(test$innov_x_times)
hist(test$learn_x_times)
hist(test$innov_x_year)
hist(test$learn_x_year)
hist(test$n_top)
setwd("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
load("data.RData")
grid <- read.csv("grid.csv")/1000
source("SpeedClimbingABM.R")
#euclidean distance function
euclidean <- function(obs_stats, sum_stats){
return(sum(sapply(2:length(obs_stats), function(x){sqrt(sum((obs_stats[[x]]-sum_stats[[x]])^2))*(x/length(obs_stats))})))
}
#subset data by gender
data <- data[which(data$gender == "W"), ]
#get all unique climbers
uniq_climbers <- unique(data$athlete)
#separate continuous sequences of years
seqs <- lapply(uniq_climbers, function(x){split(data$year[which(data$athlete == x)], cumsum(seq_along(data$year[which(data$athlete == x)]) %in% (which(diff(data$year[which(data$athlete == x)]) > 1) + 1)))})
#for each unique climber, iterate through their sequences, and and extract their ID, start year, end year, and time in start year (separate row per sequence)
pop_data <- data.table::data.table(do.call(rbind, lapply(1:length(uniq_climbers), function(i){
t(sapply(1:length(seqs[[i]]), function(j){
c(uniq_climbers[i], min(unlist(seqs[[i]][j])), max(unlist(seqs[[i]][j])), data$time[which(data$athlete == uniq_climbers[i] & data$year == min(unlist(seqs[[i]][j])))])
}))
})))
colnames(pop_data) <- c("ID", "start", "end", "time")
pop_data
#get years
years <- sort(unique(data$year))
#get population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#get observed summary statistics
obs_stats <- lapply(years, function(x){sort(data$time[which(data$year == x)])})
data
data$time[which(data$year == 2007)]
median(data$time[which(data$year == 2007)])/median(data$time[which(data$year == 2019)])
median(data$time[which(data$year == 2019)])/median(data$time[which(data$year == 2007)])
median(data$time[which(data$year == 2019)])/median(data$time[which(data$year == 2007)])
max(data$time[which(data$year == 2019)])/max(data$time[which(data$year == 2007)])
median(data$time[which(data$year == 2019)])/median(data$time[which(data$year == 2007)])
min(data$time[which(data$year == 2019)])/min(data$time[which(data$year == 2007)])
min(data$time[which(data$year == 2019)])/min(data$time[which(data$year == 2007)])
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$improve_min)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$innov_prob)
hist(test$learn_prob)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$learn_prob)
hist(test$innov_prob)
hist(test$improve_min)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$innov_x_times)
hist(test$innov_x_pop)
hist(test$learn_x_pop)
hist(test$learn_x_times)
hist(test$innov_x_year)
hist(test$learn_x_year)
load("data.RData")
grid <- read.csv("grid.csv")/1000
source("SpeedClimbingABM.R")
#euclidean distance function
euclidean <- function(obs_stats, sum_stats){
return(sum(sapply(2:length(obs_stats), function(x){sqrt(sum((obs_stats[[x]]-sum_stats[[x]])^2))*(x/length(obs_stats))})))
}
#subset data by gender
data <- data[which(data$gender == "M"), ]
#get all unique climbers
uniq_climbers <- unique(data$athlete)
#separate continuous sequences of years
seqs <- lapply(uniq_climbers, function(x){split(data$year[which(data$athlete == x)], cumsum(seq_along(data$year[which(data$athlete == x)]) %in% (which(diff(data$year[which(data$athlete == x)]) > 1) + 1)))})
#for each unique climber, iterate through their sequences, and and extract their ID, start year, end year, and time in start year (separate row per sequence)
pop_data <- data.table::data.table(do.call(rbind, lapply(1:length(uniq_climbers), function(i){
t(sapply(1:length(seqs[[i]]), function(j){
c(uniq_climbers[i], min(unlist(seqs[[i]][j])), max(unlist(seqs[[i]][j])), data$time[which(data$athlete == uniq_climbers[i] & data$year == min(unlist(seqs[[i]][j])))])
}))
})))
colnames(pop_data) <- c("ID", "start", "end", "time")
pop_data
#get years
years <- sort(unique(data$year))
#get population sizes
n <- unlist(lapply(1:length(years), function(x){nrow(data[which(data$year == years[x]), ])}))
#get observed summary statistics
obs_stats <- lapply(years, function(x){sort(data$time[which(data$year == x)])})
min(data$time[which(data$year == 2019)])/min(data$time[which(data$year == 2007)])
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$improve_min)
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$constraint_b)
hist(test$constraint_a)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$constraint_a)
hist(test$constraint_b)
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$learn_x_year)
hist(test$innov_x_year)
hist(test$learn_x_times)
hist(test$innov_x_times)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$improve_rate_m)
hist(test$improve_min)
hist(test$learn_x_pop)
hist(test$innov_x_pop)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$innov_x_pop)
hist(test$learn_x_pop)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$innov_prob)
hist(test$learn_prob)
hist(test$learn_x_times)
hist(test$innov_x_times)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$learn_prob)
hist(test$innov_prob)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$improve_min)
hist(test$innov_prob)
hist(test$innov_x_times)
hist(test$learn_x_times)
hist(test$learn_x_pop)
hist(test$innov_x_pop)
median(data$time[which(data$year == 2019)])/median(data$time[which(data$year == 2007)])
median(data$time[which(data$year == 2019)])/median(data$time[which(data$year == 2007)])
data
median(data$time[which(data$year == 2019)])/median(data$time[which(data$year == 2007)])
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$innov_prob)
hist(test$improve_min)
hist(test$learn_prob)
test <- readRDS("~/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM/hpcc_output/params.RDS")
hist(test$learn_prob)
hist(test$innov_prob)
hist(test$improve_min)
hist(test$constraint_b)
hist(test$constraint_a)
hist(test$innov_x_times)
hist(test$learn_x_times)
hist(test$learn_x_pop)
hist(test$innov_x_pop)
hist(test$learn_x_year)
hist(test$innov_x_year)
