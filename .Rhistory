#set working directory and load data and libraries for plotting
setwd("/Users/masonyoungblood/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
load("analysis/data_and_output/06_optimality_sims/optimality_sims.RData")
load("analysis/data_and_output/03_best_params/priors_and_simulations.RData")
posterior_predictions <- jsonlite::read_json("analysis/data_and_output/04_best_params_inference/posterior_predictions.json")
library(ggplot2)
library(cowplot)
#convert posteriors to usable table format
posterior_predictions <- jsonlite::read_json("analysis/data_and_output/04_best_params_inference/posterior_predictions.json")
posterior_predictions <- do.call(rbind, lapply(1:length(posterior_predictions), function(x){unlist(posterior_predictions[[x]])}))
posterior_predictions <- do.call(cbind, lapply(1:13, function(x){posterior_predictions[, x]*sd(priors_and_simulations[[1]][, x]) + mean(priors_and_simulations[[1]][, x])}))
posterior_predictions <- as.data.frame(posterior_predictions)
colnames(posterior_predictions) <- c("innov_prob", "learn_prob", "n_top",
"improve_min_m", "improve_min_w",
"improve_rate_m", "improve_rate_w",
"innov_x_year", "innov_x_times", "innov_x_pop",
"learn_x_year", "learn_x_times", "learn_x_pop")
#get coordinates for innovation and learning for optimality plots
coords <- c(median(posterior_predictions$innov_prob), median(posterior_predictions$learn_prob))
#aggregate values across combinations of innovation and learning probability
plot_data <- cbind(aggregate(min ~ innov_prob + learn_prob, optimality_sims, FUN = median),
aggregate(median ~ innov_prob + learn_prob, optimality_sims, FUN = median)$median,
aggregate(unique ~ innov_prob + learn_prob, optimality_sims, FUN = median)$unique)
colnames(plot_data) <- c("innov_prob", "learn_prob", "min", "median", "unique")
#create heatplot of minimum times
min_plot <- ggplot(plot_data, aes(x = innov_prob, y = learn_prob, fill = min)) + geom_tile() + xlab("Innovation Probability") + ylab("Copying Probability") +
scale_fill_gradientn(name = "Time (s)", colours = c("red", "white", "blue"), values = scales::rescale(c(min(plot_data$min), median(plot_data$min), max(plot_data$min)))) +
ggtitle(bquote(bold("Minimum Time"))) + theme_linedraw(base_size = 6) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
geom_point(aes(x = coords[1], y = coords[2]), size = 3) +
theme(text = element_text(family = "Avenir Next"))
#create heatplot of median times
med_plot <- ggplot(plot_data, aes(x = innov_prob, y = learn_prob, fill = median)) + geom_tile() + xlab("Innovation Probability") + ylab("Copying Probability") +
scale_fill_gradientn(name = "Time (s)", colours = c("red", "white", "blue"), values = scales::rescale(c(min(plot_data$median), median(plot_data$median), max(plot_data$median)))) +
ggtitle(bquote(bold("Median Time"))) + theme_linedraw(base_size = 6) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
geom_point(aes(x = coords[1], y = coords[2]), size = 3) +
theme(text = element_text(family = "Avenir Next"))
#create heatplot of unique number of routes
unique_plot <- ggplot(plot_data, aes(x = innov_prob, y = learn_prob, fill = unique)) + geom_tile() + xlab("Innovation Probability") + ylab("Copying Probability") +
scale_fill_gradientn(name = "# Routes", colours = c("red", "white", "blue"), values = scales::rescale(c(min(plot_data$unique), median(plot_data$unique), max(plot_data$unique)))) +
ggtitle(bquote(bold("Unique Routes"))) + theme_linedraw(base_size = 6) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
geom_point(aes(x = coords[1], y = coords[2]), size = 3) +
theme(text = element_text(family = "Avenir Next"))
#export
png("analysis/data_and_output/07_optimality_processing/optimality_heatmaps.png", units = "in", width = 7.2, height = 1.9, res = 1000)
plot_grid(min_plot + theme(legend.position = "none"),
get_legend(min_plot),
med_plot + theme(legend.position = "none"),
get_legend(med_plot),
unique_plot + theme(legend.position = "none"),
get_legend(unique_plot),
nrow = 1, rel_widths = c(1, 0.3, 1, 0.3, 1, 0.3))
dev.off()
#set working directory, load data, source code
setwd("/Users/masonyoungblood/Documents/Work/Summer_2021/Speed Climbing/SpeedClimbingABM")
load("analysis/data_and_output/03_best_params/priors_and_simulations.RData")
load("climbing_times/best_climbing_times.RData"); data <- best_climbing_times; rm(best_climbing_times)
grid <- read.csv("grid.csv")/1000
source("SpeedClimbingABM.R")
#convert posteriors to usable table format
posterior_predictions <- jsonlite::read_json("analysis/data_and_output/04_best_params_inference/posterior_predictions.json")
posterior_predictions <- do.call(rbind, lapply(1:length(posterior_predictions), function(x){unlist(posterior_predictions[[x]])}))
posterior_predictions <- do.call(cbind, lapply(1:13, function(x){posterior_predictions[, x]*sd(priors_and_simulations[[1]][, x]) + mean(priors_and_simulations[[1]][, x])}))
posterior_predictions <- as.data.frame(posterior_predictions)
colnames(posterior_predictions) <- c("innov_prob", "learn_prob", "n_top",
"improve_min_m", "improve_min_w",
"improve_rate_m", "improve_rate_w",
"innov_x_year", "innov_x_times", "innov_x_pop",
"learn_x_year", "learn_x_times", "learn_x_pop")
#prevent n_top from being < 0 or > 1
posterior_predictions$n_top[which(posterior_predictions$n_top < 0)] <- 0
posterior_predictions$n_top[which(posterior_predictions$n_top > 1)] <- 1
#get posteriors for athletic improvement for manuscript (not plotted)
quantile(posterior_predictions$improve_min_m, probs = c(0.025, 0.5, 0.975))
quantile(posterior_predictions$improve_min_w, probs = c(0.025, 0.5, 0.975))
quantile(posterior_predictions$improve_rate_m, probs = c(0.025, 0.5, 0.975))
quantile(posterior_predictions$improve_rate_w, probs = c(0.025, 0.5, 0.975))
#load libraries for plotting
library(ggplot2)
library(cowplot)
#create function for constructing plots
plot_constructor <- function(post, tol = 1000, xlim, bound = 0.001, two_axes = TRUE, xlabel = NULL, ylabel = NULL, xlabs = TRUE, ybuffer = 0.02, small = FALSE, font_size = 6, color){
post <- density(post, from = xlim[1], to = xlim[2], bw = "SJ", kernel = "gaussian")
plot_data <- data.frame(x = c(post$x), y = c(post$y))
if(length(which(post$y < bound) > 0)){plot_data$y[which(plot_data$y < bound)] <- NA}
temp <- ggplot(plot_data, aes(x, y)) + geom_line(aes(y = y), color = color) +
geom_segment(x = plot_data$x[which.max(plot_data$y)], xend = plot_data$x[which.max(plot_data$y)],
y = plot_data$y[which.max(plot_data$y)], yend = 0, color = color, linetype = "solid") +
xlim(xlim[1], xlim[2]) + xlab(xlabel) + ylab("Density") + theme_linedraw(base_size = font_size) +
scale_y_continuous(expand = c(0, 0), limits = c(0, max(plot_data$y, na.rm = TRUE) + max(plot_data$y, na.rm = TRUE)*ybuffer)) +
theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), text = element_text(family = "Avenir Next"))
if(small){
temp <- temp + theme(axis.text.y = element_blank()) + geom_vline(xintercept = 0, linetype = "dotted", size = 0.5) + ylab(ylabel)
}
if(!xlabs){
temp <- temp + theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank())
}
return(temp)
}
#construct subpanels for plots
bounds <- c(-5, 5)
innov_prob <- plot_constructor(posterior_predictions$innov_prob, xlim = c(0, 1), xlabel = "Innovation Probability", color = "red")
innov_x_times <- plot_constructor(posterior_predictions$innov_x_times, xlim = bounds, small = TRUE, ylabel = "Current\nRecord", color = "red")
innov_x_pop <- plot_constructor(posterior_predictions$innov_x_pop, xlim = bounds, small = TRUE, ylabel = "Pop.\nSize", xlabel = "Effect on Innovation", color = "red")
innov_x_year <- plot_constructor(posterior_predictions$innov_x_year, xlim = bounds, small = TRUE, ylabel = "Time\nTrend", color = "red")
learn_prob <- plot_constructor(posterior_predictions$learn_prob, xlim = c(0, 1), xlabel = "Copying Probability", color = "blue")
learn_x_times <- plot_constructor(posterior_predictions$learn_x_times, xlim = bounds, small = TRUE, ylabel = "Current\nRecord", color = "blue")
learn_x_pop <- plot_constructor(posterior_predictions$learn_x_pop, xlim = bounds, small = TRUE, ylabel = "Pop.\nSize", xlabel = "Effect on Copying", color = "blue")
learn_x_year <- plot_constructor(posterior_predictions$learn_x_year, xlim = bounds, small = TRUE, ylabel = "Time\nTrend", color = "blue")
#improve_rate_m <- plot_constructor(posterior_predictions$improve_rate_m, xlim = c(1, 3), xlabel = "Rate of Athletic Improvement (Men)")
#improve_rate_w <- plot_constructor(posterior_predictions$improve_rate_w, xlim = c(1, 3), xlabel = "Rate of Athletic Improvement (Women)")
#set theme for cowplot
theme_set(theme_cowplot(font_family = "Avenir Next"))
#combined and save panels
png("analysis/data_and_output/05_posterior_processing/posterior_distributions.png", units = "in", width = 7.2, height = 3, res = 1000)
space <- plot_grid(NULL)
innov_interactions <- plot_grid(innov_x_year, innov_x_times, innov_x_pop, ncol = 1, rel_heights = c(1, 1, 1.2))
first_row <- plot_grid(space, innov_prob, innov_interactions, nrow = 1, rel_widths = c(0.02, 1, 1))
learn_interactions <- plot_grid(learn_x_year, learn_x_times, learn_x_pop, ncol = 1, rel_heights = c(1, 1, 1.2))
second_row <- plot_grid(space, learn_prob, learn_interactions, nrow = 1, rel_widths = c(0.02, 1, 1))
#third_row <- plot_grid(space, improve_rate_m, improve_rate_w, nrow = 1, rel_widths = c(0.02, 1, 1))
plot_grid(first_row, space, second_row, ncol = 1, labels = c("A", "", "B"), rel_heights = c(0.6, 0.02, 0.6))
#plot_grid(first_row, space, second_row, space, third_row, ncol = 1, labels = c("A", "", "B", "", "C"), rel_heights = c(0.6, 0.02, 0.6, 0.02, 0.6))
dev.off()
